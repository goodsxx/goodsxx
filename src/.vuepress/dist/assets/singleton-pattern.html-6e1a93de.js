const e=JSON.parse('{"key":"v-4d05d9fd","path":"/articles/design-pattern/singleton-pattern.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","date":"2022-05-06T00:00:00.000Z","category":["设计模式","创建型模式"],"tag":["设计模式"],"timeline":true,"order":1,"description":"✨✨✨✨✨ 单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。","head":[["meta",{"property":"og:url","content":"http://goodsxx.cn/articles/design-pattern/singleton-pattern.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://goodsxx.cn/"}],["meta",{"property":"og:updated_time","content":"2022-12-20T07:12:12.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"单例模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2022-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-20T07:12:12.000Z"}]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"类图","slug":"类图","link":"#类图","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"1. 静态变量初始化(饿汉模式)","slug":"_1-静态变量初始化-饿汉模式","link":"#_1-静态变量初始化-饿汉模式","children":[]},{"level":3,"title":"2. 延迟初始化(懒汉模式)","slug":"_2-延迟初始化-懒汉模式","link":"#_2-延迟初始化-懒汉模式","children":[]},{"level":3,"title":"3. 锁机制(推荐)","slug":"_3-锁机制-推荐","link":"#_3-锁机制-推荐","children":[]},{"level":3,"title":"4. 泛型单例模式","slug":"_4-泛型单例模式","link":"#_4-泛型单例模式","children":[]},{"level":3,"title":"5. 调用","slug":"_5-调用","link":"#_5-调用","children":[]},{"level":3,"title":"6. 输出","slug":"_6-输出","link":"#_6-输出","children":[]}]}],"git":{"createdTime":1671520332000,"updatedTime":1671520332000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":1}]},"readingTime":{"minutes":2.86,"words":857},"filePathRelative":"columns/blog-posts/series/design-pattern/singleton-pattern.md","localizedDate":"2022年5月6日","excerpt":"<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">✨✨✨✨✨</p>\\n<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\\n</div>\\n","autoDesc":true}');export{e as data};
