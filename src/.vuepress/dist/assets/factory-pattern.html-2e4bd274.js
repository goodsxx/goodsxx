const t=JSON.parse('{"key":"v-2f5843d0","path":"/articles/blog-posts/series/design-pattern/factory-pattern.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","date":"2022-04-30T00:00:00.000Z","category":["设计模式","创建型模式"],"tag":["设计模式"],"timeline":true,"order":2,"description":"✨✨✨✨✨ 工厂模式（Factory Pattern）是 .NET 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。","head":[["meta",{"property":"og:url","content":"http://goodsxx.cn/my-blog/articles/blog-posts/series/design-pattern/factory-pattern.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 工厂模式（Factory Pattern）是 .NET 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://goodsxx.cn/my-blog/"}],["meta",{"property":"og:updated_time","content":"2022-11-14T16:50:44.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"工厂模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2022-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-14T16:50:44.000Z"}]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"创建一个接口","slug":"创建一个接口","link":"#创建一个接口","children":[]},{"level":3,"title":"创建实现接口的实体类","slug":"创建实现接口的实体类","link":"#创建实现接口的实体类","children":[]},{"level":3,"title":"创建一个工厂，生成基于给定信息的实体类的对象","slug":"创建一个工厂-生成基于给定信息的实体类的对象","link":"#创建一个工厂-生成基于给定信息的实体类的对象","children":[]},{"level":3,"title":"使用该工厂，通过传递类型信息来获取实体类的对象","slug":"使用该工厂-通过传递类型信息来获取实体类的对象","link":"#使用该工厂-通过传递类型信息来获取实体类的对象","children":[]},{"level":3,"title":"执行程序，输出结果","slug":"执行程序-输出结果","link":"#执行程序-输出结果","children":[]}]}],"git":{"createdTime":1668444644000,"updatedTime":1668444644000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":1}]},"readingTime":{"minutes":3.71,"words":1112},"filePathRelative":"articles/blog-posts/series/design-pattern/factory-pattern.md","localizedDate":"2022年4月30日","excerpt":"<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">✨✨✨✨✨</p>\\n<p>工厂模式（Factory Pattern）是 .NET 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\\n</div>\\n","autoDesc":true}');export{t as data};
