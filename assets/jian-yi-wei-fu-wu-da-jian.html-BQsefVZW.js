import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as r,c as d,a as n,b as e,e as i,d as a}from"./app-CfsLqU1F.js";const c="/assets/1650439716799-DIa-Pgj0.png",o={},p=a('<div class="hint-container tip"><p class="hint-container-title">✨✨✨✨✨</p><p>基于Docker、Nginx、Consul、Ocelot等，从零开始搭建一套具有动态伸缩、限流、熔断功能的简易微服务架构。</p></div><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><figure><img src="'+c+`" alt="简易微服务架构" tabindex="0" loading="lazy"><figcaption>简易微服务架构</figcaption></figure><h2 id="环境说明" tabindex="-1"><a class="header-anchor" href="#环境说明"><span>环境说明</span></a></h2><ul><li>本文适合有一定linux基础，并对容器、集群、负载均衡、服务注册与发现、网关等概念有一定了解的同学。</li><li>本文中默认各服务集群部署在不同的Linux服务器(下文用Linux1...2...3...代指)，环境所需的多台服务器可用虚拟机代替。</li><li>由于在该架构中，服务端在启动时会想Consul注册中心发起注册，所以我们需要先进行Consul集群的搭建。</li></ul><h2 id="_1-consul注册中心集群搭建-linux1" tabindex="-1"><a class="header-anchor" href="#_1-consul注册中心集群搭建-linux1"><span>1 Consul注册中心集群搭建(Linux1)</span></a></h2><h3 id="_1-1-拉取consul镜像" tabindex="-1"><a class="header-anchor" href="#_1-1-拉取consul镜像"><span>1.1 拉取Consul镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull consul
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-配置第一个consul" tabindex="-1"><a class="header-anchor" href="#_1-2-配置第一个consul"><span>1.2 配置第一个Consul</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> consul1 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token string">&#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8500</span>:8500 <span class="token parameter variable">-p</span> <span class="token number">8300</span>:8300 <span class="token parameter variable">-p</span> <span class="token number">8301</span>:8301/udp <span class="token parameter variable">-p</span> <span class="token number">8302</span>:8302/udp <span class="token parameter variable">-p</span> <span class="token number">8600</span>:8600 <span class="token punctuation">\\</span>
consul agent <span class="token parameter variable">-server</span> -bootstrap-expect<span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">-ui</span> <span class="token parameter variable">-bind</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token parameter variable">-client</span> <span class="token number">0.0</span>.0.0 <span class="token punctuation">\\</span>
-data-dir<span class="token operator">=</span>/consul/data-dir <span class="token punctuation">\\</span>
<span class="token parameter variable">-node</span><span class="token operator">=</span>nodes1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>参数说明：</strong></p><p><strong>8500 http 端口，用于 http 接口和 Web ui</strong></p><p><strong>8300 server rpc 端口，同一数据中心 consul server 之间通过该端口通信</strong></p><p><strong>8301 serf lan 端口，同一数据中心 consul client 通过该端口通信</strong></p><p><strong>8302 serf wan 端口，不同数据中心 consul server 通过该端口通信</strong></p><p><strong>8600 dns 端口，用于服务发现</strong></p><p><strong>-server 以server模式启动，默认为client模式启动</strong></p><p><strong>-bootstrap-expect 2：集群至少两台服务器，才能选举集群 leader，数目一达到，它就会被激活</strong></p><p><strong>-ui：运行 Web 控制台</strong></p><p><strong>-bind：监听网口，0.0.0.0 表示所有网口，如果不指定默认未 127.0.0.1，则无法和容器通信</strong></p><p><strong>-client：限制某些网口可以访问</strong></p><p><strong>-node：节点名称，节点中必须是唯一的</strong></p></blockquote><p><strong>默认Consule面板地址：[服务器IP]:8500</strong></p><p><strong>查看node1情况 (正常输出：Consul agent running!)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> consul1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取 Consul Server 1 的 ip 地址 (默认：172.17.0.2)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> consul1 consul members
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-启动第二个consul服务" tabindex="-1"><a class="header-anchor" href="#_1-3-启动第二个consul服务"><span>1.3 启动第二个Consul服务</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name consul2 --restart=always \\
-e &#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39; \\
 -p 8501:8500 \\
consul agent -server -bootstrap-expect=2 -ui -bind=0.0.0.0 -client 0.0.0.0 \\
-data-dir=/consul/data-dir \\
-node=nodes2 \\
-join 172.17.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>参数说明：</strong></p><p><strong>-join join其他Consul服务的ip可组成集群</strong></p></blockquote><h3 id="_1-4-启动其余4个consul服务" tabindex="-1"><a class="header-anchor" href="#_1-4-启动其余4个consul服务"><span>1.4 启动其余4个Consul服务</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name consul3 --restart=always \\
-e &#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39; \\
 -p 8502:8500 \\
consul agent -server -bootstrap-expect=2 -ui -bind=0.0.0.0 -client 0.0.0.0 \\
-data-dir=/consul/data-dir \\
-node=nodes3 \\
-join 172.17.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name=consul4 --restart=always \\
-e &#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39; \\
 -p 8503:8500 \\
consul agent -ui -bind=0.0.0.0 -client 0.0.0.0 \\
-node=nodec1 \\
-retry-join=172.17.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name=consul5 --restart=always \\
-e &#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39; \\
 -p 8504:8500 \\
consul agent -ui -bind=0.0.0.0 -client 0.0.0.0 \\
-node=nodec2 \\
-retry-join=172.17.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name=consul6 --restart=always \\
-e &#39;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;:true}&#39; \\
 -p 8505:8500 \\
consul agent -ui -bind=0.0.0.0 -client 0.0.0.0 \\
-node=nodec3 \\
-retry-join=172.17.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时Consul 集群已完成部署，可以浏览器访问：http://ip:8500 | 8501 | 8502 查看状态（&quot;|&quot;=或者）</p><p><strong>查看节点</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> consul1 consul members
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看主从信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> consul1 consul operator raft list-peers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-为consul集群配置nginx负载均衡-linux2" tabindex="-1"><a class="header-anchor" href="#_2-为consul集群配置nginx负载均衡-linux2"><span>2 为Consul集群配置Nginx负载均衡(Linux2)</span></a></h2><h3 id="_2-1-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2-1-拉取镜像"><span>2.1 拉取镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-启动nginx服务" tabindex="-1"><a class="header-anchor" href="#_2-2-启动nginx服务"><span>2.2 启动Nginx服务</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-修改配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-修改配置文件"><span>2.3 修改配置文件</span></a></h3><p><strong>进入容器：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置文件地址：/etc/nginx/nginx.conf</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/nginx/nginx.conf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>若vi或者vim命令无法使用，则需先执行以下命令：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span>  update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在默认配置文件http节点下加入以下代码并保存：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#upstream 轮询模式 consul 名称，可自定义</span>
<span class="token comment">#server 后为consul地址</span>

upstream consul<span class="token punctuation">{</span>
server IP:8500<span class="token punctuation">;</span>
server IP:8501<span class="token punctuation">;</span>
server IP:8502<span class="token punctuation">;</span>
server IP:8503<span class="token punctuation">;</span>
server IP:8504<span class="token punctuation">;</span>
server IP:8505<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">#该服务器接受到端口80的所有流量并将其传递给上游upstream 。</span>
<span class="token comment">#请注意，upstream名称和proxy_pass需要匹配。</span>

server <span class="token punctuation">{</span>
listen <span class="token number">80</span><span class="token punctuation">;</span>
server_name localhost<span class="token punctuation">;</span>
location / <span class="token punctuation">{</span>
proxy_pass http://consul<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

注释掉 默认配置文件中的 /include /etc/nginx/conf.d/*.conf
不然会导致配置不生效
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-重启nginx服务" tabindex="-1"><a class="header-anchor" href="#_2-4-重启nginx服务"><span>2.4 重启Nginx服务</span></a></h3><p><strong>退出镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启Nginx服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-api服务端搭建-linux3" tabindex="-1"><a class="header-anchor" href="#_3-api服务端搭建-linux3"><span>3 API服务端搭建(Linux3)</span></a></h2><h3 id="_3-1准备-net-core-web-api-作为测试服务端" tabindex="-1"><a class="header-anchor" href="#_3-1准备-net-core-web-api-作为测试服务端"><span>3.1准备.Net Core Web Api 作为测试服务端</span></a></h3>`,50),u={href:"https://gitee.com/goodsxx/server-test",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="_3-2-上传项目至linux3" tabindex="-1"><a class="header-anchor" href="#_3-2-上传项目至linux3"><span>3.2 上传项目至Linux3</span></a></h3><p><strong>将WebApi项目上传至linux的test/weifuwu目录下</strong></p><p><strong>进入项目根目录：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /test/weifuwu/ServerTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>构建镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> dotnet <span class="token parameter variable">-f</span> Dockerfile <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以此镜像为模板启动多个容器：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run --restart=always -idt -p 2300:80 dotnet --ip=*.*.*.26 --port=2300 --name=ServerA
docker run --restart=always -idt -p 2301:80 dotnet --ip=*.*.*.26 --port=2301 --name=ServerA
docker run --restart=always -idt -p 2302:80 dotnet --ip=*.*.*.26 --port=2302 --name=ServerA

docker run --restart=always -idt -p 2303:80 dotnet --ip=*.*.*.26 --port=2303 --name=ServerB
docker run --restart=always -idt -p 2304:80 dotnet --ip=*.*.*.26 --port=2304 --name=ServerB
docker run --restart=always -idt -p 2305:80 dotnet --ip=*.*.*.26 --port=2305 --name=ServerB

docker run --restart=always -idt -p 2306:80 dotnet --ip=*.*.*.26 --port=2306 --name=ServerC
docker run --restart=always -idt -p 2307:80 dotnet --ip=*.*.*.26 --port=2307 --name=ServerC
docker run --restart=always -idt -p 2308:80 dotnet --ip=*.*.*.26 --port=2308 --name=ServerC

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-ocelot网关集群搭建-linux4" tabindex="-1"><a class="header-anchor" href="#_4-ocelot网关集群搭建-linux4"><span>4 Ocelot网关集群搭建(Linux4)</span></a></h2><h3 id="_4-1-准备-net-core-web-api-测试项目" tabindex="-1"><a class="header-anchor" href="#_4-1-准备-net-core-web-api-测试项目"><span>4.1 准备 .Net Core Web Api 测试项目</span></a></h3>`,12),b={href:"https://gitee.com/goodsxx/ocelot-test",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="_4-2-上传项目至linux服务器" tabindex="-1"><a class="header-anchor" href="#_4-2-上传项目至linux服务器"><span>4.2 上传项目至Linux服务器</span></a></h3><p><strong>将WebApi项目上传至linux的test/weifuwu目录下</strong></p><p><strong>进入项目根目录：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /test/weifuwu/OcelotTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>构建镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ocelot <span class="token parameter variable">-f</span> Dockerfile <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以此镜像为模板启动多个容器：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run --restart=always -idt -p 801:80 ocelot
docker run --restart=always -idt -p 802:80 ocelot
docker run --restart=always -idt -p 803:80 ocelot

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-为ocelot集群配置nginx负载均衡-linux4" tabindex="-1"><a class="header-anchor" href="#_5-为ocelot集群配置nginx负载均衡-linux4"><span>5 为Ocelot集群配置Nginx负载均衡(Linux4)</span></a></h2><h3 id="_5-1-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_5-1-拉取镜像"><span>5.1 拉取镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-启动nginx服务" tabindex="-1"><a class="header-anchor" href="#_5-2-启动nginx服务"><span>5.2 启动Nginx服务</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-修改配置文件" tabindex="-1"><a class="header-anchor" href="#_5-3-修改配置文件"><span>5.3 修改配置文件</span></a></h3><p><strong>进入容器：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置文件地址：/etc/nginx/nginx.conf</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/nginx/nginx.conf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>若vi或者vim命令无法使用，则需先执行以下命令：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span>  update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在默认配置文件http节点下加入以下代码并保存：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#upstream 轮询模式 ocelot 名称，可自定义</span>
<span class="token comment">#server 后为ocelot地址</span>

upstream ocelot<span class="token punctuation">{</span>
server *.*.*.26:801<span class="token punctuation">;</span>
server *.*.*.26:802<span class="token punctuation">;</span>
server *.*.*.26:803<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">#该服务器接受到端口80的所有流量并将其传递给上游upstream 。</span>
<span class="token comment">#请注意，upstream名称和proxy_pass需要匹配。</span>

server <span class="token punctuation">{</span>
listen <span class="token number">80</span><span class="token punctuation">;</span>
server_name localhost<span class="token punctuation">;</span>
location / <span class="token punctuation">{</span>
proxy_pass http://ocelot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">#注释掉 默认配置文件中的 /include /etc/nginx/conf.d/*.conf</span>
<span class="token comment">#不然会导致配置不生效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-重启nginx服务" tabindex="-1"><a class="header-anchor" href="#_5-4-重启nginx服务"><span>5.4 重启Nginx服务</span></a></h3><p><strong>退出镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启Nginx服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-web客户端搭建-linux6" tabindex="-1"><a class="header-anchor" href="#_6-web客户端搭建-linux6"><span>6 Web客户端搭建(Linux6)</span></a></h2><h3 id="_6-1-准备-net-core-web-mvc-测试项目" tabindex="-1"><a class="header-anchor" href="#_6-1-准备-net-core-web-mvc-测试项目"><span>6.1 准备 .Net Core Web(MVC) 测试项目</span></a></h3>`,31),g={href:"https://gitee.com/goodsxx/web-test",target:"_blank",rel:"noopener noreferrer"},h=a(`<h3 id="_6-2-上传项目至linux6" tabindex="-1"><a class="header-anchor" href="#_6-2-上传项目至linux6"><span>6.2 上传项目至Linux6</span></a></h3><p><strong>将WebApi项目上传至linux的test/weifuwu目录下</strong></p><p><strong>进入项目根目录：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /test/weifuwu/WebTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>构建镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> web <span class="token parameter variable">-f</span> Dockerfile <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看镜像：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以此镜像为模板启动容器：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-idt</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="大功告成" tabindex="-1"><a class="header-anchor" href="#大功告成"><span>大功告成</span></a></h2><p>效果：</p><ol><li>刷新页面，客户端调用的服务端IP会变化</li><li>当关闭/新增一个服务端的时候，服务注册发现生效，客户端并不会报错</li><li>多次刷新页面会出发限流效果，提示请稍后</li></ol>`,13);function x(k,_){const s=t("ExternalLinkIcon");return r(),d("div",null,[p,n("p",null,[e("相相关代码可参考我已经写好的测试项目："),n("a",u,[e("ServerTest"),i(s)])]),v,n("p",null,[e("相相关代码可参考我已经写好的测试项目："),n("a",b,[e("OcelotTest"),i(s)])]),m,n("p",null,[e("相相关代码可参考我已经写好的测试项目："),n("a",g,[e("WebTest"),i(s)])]),h])}const C=l(o,[["render",x],["__file","jian-yi-wei-fu-wu-da-jian.html.vue"]]),y=JSON.parse('{"path":"/articles/micro-service/jian-yi-wei-fu-wu-da-jian.html","title":"基于Docker+Consul+Ocelot+Nginx搭建微服务架构","lang":"zh-CN","frontmatter":{"title":"基于Docker+Consul+Ocelot+Nginx搭建微服务架构","date":"2022-03-01T00:00:00.000Z","category":["微服务"],"tag":["Nginx","Consul","Ocelot"],"timeline":true,"order":1,"description":"✨✨✨✨✨ 基于Docker、Nginx、Consul、Ocelot等，从零开始搭建一套具有动态伸缩、限流、熔断功能的简易微服务架构。","head":[["meta",{"property":"og:url","content":"http://blog.goodsxx.cn/articles/micro-service/jian-yi-wei-fu-wu-da-jian.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"基于Docker+Consul+Ocelot+Nginx搭建微服务架构"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 基于Docker、Nginx、Consul、Ocelot等，从零开始搭建一套具有动态伸缩、限流、熔断功能的简易微服务架构。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-23T05:09:40.000Z"}],["meta",{"property":"article:author","content":"SongXinXin"}],["meta",{"property":"article:tag","content":"Nginx"}],["meta",{"property":"article:tag","content":"Consul"}],["meta",{"property":"article:tag","content":"Ocelot"}],["meta",{"property":"article:published_time","content":"2022-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-23T05:09:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于Docker+Consul+Ocelot+Nginx搭建微服务架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-23T05:09:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SongXinXin\\"}]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"环境说明","slug":"环境说明","link":"#环境说明","children":[]},{"level":2,"title":"1 Consul注册中心集群搭建(Linux1)","slug":"_1-consul注册中心集群搭建-linux1","link":"#_1-consul注册中心集群搭建-linux1","children":[{"level":3,"title":"1.1 拉取Consul镜像","slug":"_1-1-拉取consul镜像","link":"#_1-1-拉取consul镜像","children":[]},{"level":3,"title":"1.2 配置第一个Consul","slug":"_1-2-配置第一个consul","link":"#_1-2-配置第一个consul","children":[]},{"level":3,"title":"1.3 启动第二个Consul服务","slug":"_1-3-启动第二个consul服务","link":"#_1-3-启动第二个consul服务","children":[]},{"level":3,"title":"1.4 启动其余4个Consul服务","slug":"_1-4-启动其余4个consul服务","link":"#_1-4-启动其余4个consul服务","children":[]}]},{"level":2,"title":"2 为Consul集群配置Nginx负载均衡(Linux2)","slug":"_2-为consul集群配置nginx负载均衡-linux2","link":"#_2-为consul集群配置nginx负载均衡-linux2","children":[{"level":3,"title":"2.1 拉取镜像","slug":"_2-1-拉取镜像","link":"#_2-1-拉取镜像","children":[]},{"level":3,"title":"2.2 启动Nginx服务","slug":"_2-2-启动nginx服务","link":"#_2-2-启动nginx服务","children":[]},{"level":3,"title":"2.3 修改配置文件","slug":"_2-3-修改配置文件","link":"#_2-3-修改配置文件","children":[]},{"level":3,"title":"2.4 重启Nginx服务","slug":"_2-4-重启nginx服务","link":"#_2-4-重启nginx服务","children":[]}]},{"level":2,"title":"3 API服务端搭建(Linux3)","slug":"_3-api服务端搭建-linux3","link":"#_3-api服务端搭建-linux3","children":[{"level":3,"title":"3.1准备.Net Core Web Api 作为测试服务端","slug":"_3-1准备-net-core-web-api-作为测试服务端","link":"#_3-1准备-net-core-web-api-作为测试服务端","children":[]},{"level":3,"title":"3.2 上传项目至Linux3","slug":"_3-2-上传项目至linux3","link":"#_3-2-上传项目至linux3","children":[]}]},{"level":2,"title":"4 Ocelot网关集群搭建(Linux4)","slug":"_4-ocelot网关集群搭建-linux4","link":"#_4-ocelot网关集群搭建-linux4","children":[{"level":3,"title":"4.1 准备 .Net Core Web Api 测试项目","slug":"_4-1-准备-net-core-web-api-测试项目","link":"#_4-1-准备-net-core-web-api-测试项目","children":[]},{"level":3,"title":"4.2 上传项目至Linux服务器","slug":"_4-2-上传项目至linux服务器","link":"#_4-2-上传项目至linux服务器","children":[]}]},{"level":2,"title":"5 为Ocelot集群配置Nginx负载均衡(Linux4)","slug":"_5-为ocelot集群配置nginx负载均衡-linux4","link":"#_5-为ocelot集群配置nginx负载均衡-linux4","children":[{"level":3,"title":"5.1 拉取镜像","slug":"_5-1-拉取镜像","link":"#_5-1-拉取镜像","children":[]},{"level":3,"title":"5.2 启动Nginx服务","slug":"_5-2-启动nginx服务","link":"#_5-2-启动nginx服务","children":[]},{"level":3,"title":"5.3 修改配置文件","slug":"_5-3-修改配置文件","link":"#_5-3-修改配置文件","children":[]},{"level":3,"title":"5.4 重启Nginx服务","slug":"_5-4-重启nginx服务","link":"#_5-4-重启nginx服务","children":[]}]},{"level":2,"title":"6 Web客户端搭建(Linux6)","slug":"_6-web客户端搭建-linux6","link":"#_6-web客户端搭建-linux6","children":[{"level":3,"title":"6.1 准备 .Net Core Web(MVC) 测试项目","slug":"_6-1-准备-net-core-web-mvc-测试项目","link":"#_6-1-准备-net-core-web-mvc-测试项目","children":[]},{"level":3,"title":"6.2 上传项目至Linux6","slug":"_6-2-上传项目至linux6","link":"#_6-2-上传项目至linux6","children":[]}]},{"level":2,"title":"大功告成","slug":"大功告成","link":"#大功告成","children":[]}],"git":{"createdTime":1668444644000,"updatedTime":1677128980000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":1}]},"readingTime":{"minutes":6.07,"words":1820},"filePathRelative":"articles/micro-service/jian-yi-wei-fu-wu-da-jian.md","localizedDate":"2022年3月1日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">✨✨✨✨✨</p>\\n<p>基于Docker、Nginx、Consul、Ocelot等，从零开始搭建一套具有动态伸缩、限流、熔断功能的简易微服务架构。</p>\\n</div>\\n","autoDesc":true}');export{C as comp,y as data};
