import{_ as i,X as e,Y as r,Z as n,a0 as a,a3 as t}from"./framework-458c221e.js";const l="/assets/1673321625571-8ac43a1f.png",h="/assets/1673323899813-3570a3ee.png",s="/assets/1673323904834-93078d51.png",d="/assets/1673323932414-62e3b87a.png",o={},c=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"✨✨✨✨✨"),a("p",null,"此文章将向大家分析 MAUI-VUE 混合开发的三种方案："),a("p",null,"MAUI原生方案、Web嵌套方案、MAUI原生+Web嵌套方案"),a("p",null,"三种方案各自的优点及缺点和潜在问题。")],-1),g=t('<h2 id="maui原生方案" tabindex="-1"><a class="header-anchor" href="#maui原生方案" aria-hidden="true">#</a> MAUI原生方案</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li>MAUI 中使用的控件均为平台原生 UI，性能和兼容性比较好</li><li>MAUI 中提供了丰富的与平台交互的 API，可以直接通过这些 API 来访问平台中的大部分功能</li><li>相对于混合开发，原生开发的程序复杂度更低，有利于提高开发效率</li><li>有利于保持应用 UI 呈现样式的统一</li></ol><h3 id="缺点及潜在问题" tabindex="-1"><a class="header-anchor" href="#缺点及潜在问题" aria-hidden="true">#</a> 缺点及潜在问题</h3><ol><li>对于部分 UI 控件的界面自定义支持不完善，可能难以实现预期效果</li><li>对于页面结构比较复杂的页面，比如多层嵌套页面可能会造成渲染卡顿</li><li>每次更新都需要重新打包发布，需要用户重新安装新版应用</li><li>存在一定的学习成本，一定程度上会影响开发效率</li></ol><h3 id="问题举例" tabindex="-1"><a class="header-anchor" href="#问题举例" aria-hidden="true">#</a> 问题举例</h3><p>.NET MAUI 对于涉及平台的一些功能的支持并不完整，进而会给UI设计中的一些效果实现造成困难，部分举例说明如下：</p><h4 id="统一的状态栏" tabindex="-1"><a class="header-anchor" href="#统一的状态栏" aria-hidden="true">#</a> 统一的状态栏</h4><figure><img src="'+l+'" alt="统一的状态栏" tabindex="0" loading="lazy"><figcaption>统一的状态栏</figcaption></figure><p><strong>设计要求：</strong> 设备状态栏 和 应用程序标题栏 保持背景统一</p><p><strong>是否能实现：</strong> 否——仅可实现纯色背景的统一</p><p><strong>原因：</strong> 应用的标题栏样式的控制属于应用内的范畴，我们可以做到高度的定制化，但是平台的状态栏控制是属于平台层面的，MAUI对平台API的封装提供了入口支持对状态栏进行一些简单的设置，但是无法做到和应用内标题栏使用统一连续的背景图片。</p><h4 id="选取器" tabindex="-1"><a class="header-anchor" href="#选取器" aria-hidden="true">#</a> 选取器</h4><figure><img src="'+h+'" alt="选取器" tabindex="0" loading="lazy"><figcaption>选取器</figcaption></figure><figure><img src="'+s+'" alt="日期选取器" tabindex="0" loading="lazy"><figcaption>日期选取器</figcaption></figure><figure><img src="'+d+'" alt="时间选取器" tabindex="0" loading="lazy"><figcaption>时间选取器</figcaption></figure><p><strong>设计要求：</strong> 在APP中实现如图所示的各种选取器效果</p><p><strong>是否能实现：</strong> 否——暂时可实现近似效果</p><p><strong>原因：</strong> MAUI仅提供了默认的下拉框和时间选取器控件，默认控件与UI设计的差异非常大且不支持样式的自定义设置，若想实现设计效果则需要利用MAUI的其它现有组件进行组合开发，但这并不能完全实现UI设计的效果，例如在MAUI中并没有现成的组件支持上下滑动选项来选取内容，所以通过上下拖动的方式来操作的选取器不易实现</p><h2 id="web-嵌套方案" tabindex="-1"><a class="header-anchor" href="#web-嵌套方案" aria-hidden="true">#</a> Web 嵌套方案</h2><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h3><ol><li>基于 H5 和 Vue 开发的 Web 页面能很好的进行样式的自定义开发，从而实现复杂的 UI 效果</li><li>程序更新只需要在服务端发布，客户端无需任何更改</li><li>相较于原生开发，H5 和 Vue 的学低成本更低，进而提高开发效率</li></ol><h3 id="缺点及潜在问题-1" tabindex="-1"><a class="header-anchor" href="#缺点及潜在问题-1" aria-hidden="true">#</a> 缺点及潜在问题</h3><ol><li>所有页面加载均需要请求服务器，因此对网络环境要求较高，可能导致页面加载缓慢甚至加载失败</li><li>在 Web 中访问平台中的功能时可能存在困难，还需进一步验证</li><li>纯 Web 嵌套的方案可能会给未来的程序开发埋下隐患，造成一些不可预知的问题</li></ol><h2 id="maui-原生-web-嵌套方案" tabindex="-1"><a class="header-anchor" href="#maui-原生-web-嵌套方案" aria-hidden="true">#</a> MAUI 原生 + Web 嵌套方案</h2><h3 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2" aria-hidden="true">#</a> 优点</h3><ol><li>继承了上述两种方案各自的优点，可以灵活组合来实现需求</li><li>可以灵活才用其中的一种方案来规避另一种方案可能会造成的问题</li></ol><h3 id="缺点及潜在问题-2" tabindex="-1"><a class="header-anchor" href="#缺点及潜在问题-2" aria-hidden="true">#</a> 缺点及潜在问题</h3><ol><li>学习成本及程序复杂度都比较高，一定程度影响开发效率</li><li>原生页面和 Web 页面的 UI 风格保持一致可能存在一定困难</li><li>兼容性及稳定性可能不如单一技术方案</li></ol>',29);function f(p,u){return e(),r("div",null,[c,n(" more "),g])}const _=i(o,[["render",f],["__file","maui-web-hunhekaifa-fanganfenxi.html.vue"]]);export{_ as default};
