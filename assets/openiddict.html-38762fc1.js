import{_ as p,X as o,Y as c,$ as s,a1 as n,a0 as t,Z as i,a3 as e,F as l}from"./framework-8e4c1295.js";const u="/assets/1682175026066-02f56f09.png",r={},d={class:"hint-container tip"},k=s("p",{class:"hint-container-title"},"✨✨✨✨✨",-1),v={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},m={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),n(" 介绍")],-1),h=s("h3",{id:"什么是-openiddict",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么是-openiddict","aria-hidden":"true"},"#"),n(" 什么是 OpenIddict？")],-1),f={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},g={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},y={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,"2020年，ASOS 被合并到 OpenIddict 3.0 中，形成了一个统一的堆栈，在“降级模式”的帮助下仍能为新用户提供易于使用的方法和为高级用户提供低级别的体验，而不需要支持数据库。",-1),w={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"Microsoft.OwinOAuthAuthorizationServerMiddleware",-1),C=s("code",null,"OAuthBearerAuthenticationMiddleware",-1),S={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},I=s("h3",{id:"核心概念",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#核心概念","aria-hidden":"true"},"#"),n(" 核心概念")],-1),O=s("h4",{id:"用户身份验证",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#用户身份验证","aria-hidden":"true"},"#"),n(" 用户身份验证")],-1),P={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},x=s("h4",{id:"通行模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#通行模式","aria-hidden":"true"},"#"),n(" 通行模式")],-1),T=s("code",null,"OAuthAuthorizationServerMiddleware",-1),q={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddServer</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 启用授权和令牌终结点。</span>
        options<span class="token punctuation">.</span><span class="token function">SetAuthorizationEndpointUris</span><span class="token punctuation">(</span><span class="token string">&quot;/authorize&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">SetTokenEndpointUris</span><span class="token punctuation">(</span><span class="token string">&quot;/token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启用授权代码流。</span>
        options<span class="token punctuation">.</span><span class="token function">AllowAuthorizationCodeFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册签名和加密凭据。</span>
        options<span class="token punctuation">.</span><span class="token function">AddDevelopmentEncryptionCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">AddDevelopmentSigningCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册ASP.NET Core主机并配置授权终结点</span>
        <span class="token comment">// 允许/authorify最小API处理程序处理授权请求</span>
        <span class="token comment">// 经过内置的OpenIddict服务器事件处理程序验证后。</span>
        <span class="token comment">//</span>
        <span class="token comment">// 令牌请求将由OpenIddict自己通过重用标识来处理</span>
        <span class="token comment">// 由/authorify处理程序创建并存储在授权代码中。</span>
        options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">EnableAuthorizationEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/authorize&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 解决存储在Steam身份验证舞蹈后创建的主体中的声明。</span>
    <span class="token comment">// 如果找不到主体，则触发一个新的挑战，将用户重定向到Steam。</span>
    <span class="token class-name"><span class="token keyword">var</span></span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>SteamAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Principal<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>principal <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Challenge</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> SteamAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> identifier <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>

    <span class="token comment">// 创建一个新身份并从Steam主体导入一些精选声明。</span>
    <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span>Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事件模式" tabindex="-1"><a class="header-anchor" href="#事件模式" aria-hidden="true">#</a> 事件模式</h4><p>OpenIddict 为其服务器和验证堆栈实现了一个强大的基于事件的模型：每个请求处理逻辑部分都实现为一个事件处理程序，可以将其移除、移动到管道中的不同位置或替换为自定义处理程序，以覆盖 OpenIddict 使用的默认逻辑。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 包含负责拒绝未指定有效提示参数的授权请求的逻辑。</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatePromptParameter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IOpenIddictServerHandler<span class="token punctuation">&lt;</span>ValidateAuthorizationRequestContext<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取分配给此处理程序的默认描述符定义。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">OpenIddictServerHandlerDescriptor</span> Descriptor <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token operator">=</span> OpenIddictServerHandlerDescriptor<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateBuilder</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ValidateAuthorizationRequestContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseSingletonHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ValidatePromptParameter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">SetOrder</span><span class="token punctuation">(</span>ValidateNonceParameter<span class="token punctuation">.</span>Descriptor<span class="token punctuation">.</span>Order <span class="token operator">+</span> <span class="token number">1_000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>OpenIddictServerHandlerType<span class="token punctuation">.</span>BuiltIn<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inheritdoc</span><span class="token punctuation">/&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name">ValidateAuthorizationRequestContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 通过同意/登录或选择帐户拒绝指定prompt=none的请求。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>Consent<span class="token punctuation">)</span> <span class="token operator">||</span>
                                                        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>Login<span class="token punctuation">)</span> <span class="token operator">||</span>
                                                        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>SelectAccount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>SR<span class="token punctuation">.</span><span class="token function">GetResourceString</span><span class="token punctuation">(</span>SR<span class="token punctuation">.</span>ID6040<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span><span class="token function">Reject</span><span class="token punctuation">(</span>
                <span class="token named-parameter punctuation">error</span><span class="token punctuation">:</span> Errors<span class="token punctuation">.</span>InvalidRequest<span class="token punctuation">,</span>
                <span class="token named-parameter punctuation">description</span><span class="token punctuation">:</span> SR<span class="token punctuation">.</span><span class="token function">FormatID2052</span><span class="token punctuation">(</span>Parameters<span class="token punctuation">.</span>Prompt<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token named-parameter punctuation">uri</span><span class="token punctuation">:</span> SR<span class="token punctuation">.</span><span class="token function">FormatID8000</span><span class="token punctuation">(</span>SR<span class="token punctuation">.</span>ID2052<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 OpenIddict 中，事件处理程序通常定义为专用类，但也可以使用委托进行注册。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddServer</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddEventHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HandleConfigurationRequestContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
            builder<span class="token punctuation">.</span><span class="token function">UseInlineHandler</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 将自定义元数据附加到配置文档。</span>
                context<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;custom_metadata&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

                <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入门指南" tabindex="-1"><a class="header-anchor" href="#入门指南" aria-hidden="true">#</a> 入门指南</h2>`,8),N={href:"https://github.com/openiddict/openiddict-samples",target:"_blank",rel:"noopener noreferrer"},D=s("p",null,"如果您不想从推荐的示例之一开始，您需要：",-1),R={href:"https://dotnet.microsoft.com/zh-cn/download",target:"_blank",rel:"noopener noreferrer"},M={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},U={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},H=e(`<p>更新 <code>.csproj</code> 文件以引用最新的包：<code>OpenIddict</code>。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenIddict.AspNetCore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.2.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenIddict.EntityFrameworkCore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.2.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>Startup.ConfigureServices</code> 中配置 OpenIddict 核心、服务器和验证服务。这是用于机器对机器场景中的客户端凭据授权的示例：</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllersWithViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 将实体框架核心配置为使用Microsoft SQL Server。</span>
        options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;DefaultConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册OpenIddict所需的实体集。</span>
        <span class="token comment">// 注意：如果需要替换默认的OpenIddict实体，请使用泛型重载。</span>
        options<span class="token punctuation">.</span><span class="token function">UseOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token function">AddOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 注册OpenIddict核心组件。</span>
        <span class="token punctuation">.</span><span class="token function">AddCore</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 配置OpenIddict以使用实体框架核心存储和模型。</span>
            <span class="token comment">// 注意：调用ReplaceDefaultEntities()来替换默认实体。</span>
            options<span class="token punctuation">.</span><span class="token function">UseEntityFrameworkCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 注册OpenIddict服务器组件。</span>
        <span class="token punctuation">.</span><span class="token function">AddServer</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 启用令牌终结点。</span>
            options<span class="token punctuation">.</span><span class="token function">SetTokenEndpointUris</span><span class="token punctuation">(</span><span class="token string">&quot;connect/token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 启用客户端凭据流。</span>
            options<span class="token punctuation">.</span><span class="token function">AllowClientCredentialsFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册签名和加密凭据。</span>
            options<span class="token punctuation">.</span><span class="token function">AddDevelopmentEncryptionCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">AddDevelopmentSigningCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册ASP.NET Core主机并配置ASP.NET Core选项。</span>
            options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">EnableTokenEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 注册OpenIddict验证组件。</span>
        <span class="token punctuation">.</span><span class="token function">AddValidation</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 从本地OpenIddict服务器实例导入配置。</span>
            options<span class="token punctuation">.</span><span class="token function">UseLocalServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册ASP.NET Core主机。</span>
            options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 向示例客户端注册负责数据库种子设定的工作人员。</span>
    <span class="token comment">// 注意：在实际应用程序中，此步骤应该是设置脚本的一部分。</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),V={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span><span class="token function">MapDefaultControllerRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新您的 Entity Framework Core 上下文注册以注册 OpenIddict 实体：</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 将实体框架核心配置为使用Microsoft SQL Server。</span>
    options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;DefaultConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册OpenIddict所需的实体集。</span>
    <span class="token comment">// 注意：如果需要替换默认的OpenIddict实体，请使用泛型重载。</span>
    options<span class="token punctuation">.</span><span class="token function">UseOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z={class:"hint-container info"},B=s("p",{class:"hint-container-title"},"相关信息",-1),G={href:"https://documentation.openiddict.com/integrations/entity-framework-core.html#use-a-custom-primary-key-type",target:"_blank",rel:"noopener noreferrer"},L=e(`<ul><li>创建自己的授权控制器：实现自定义授权控制器是必须的，以允许 OpenIddict 根据您提供的标识和声明创建令牌。这是用于机器对机器场景中的客户端凭据授权的示例：</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOpenIddictApplicationManager</span> _applicationManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AuthorizationController</span><span class="token punctuation">(</span><span class="token class-name">IOpenIddictApplicationManager</span> applicationManager<span class="token punctuation">)</span>
        <span class="token operator">=&gt;</span> _applicationManager <span class="token operator">=</span> applicationManager<span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;~/connect/token&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Produces</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetOpenIddictServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">IsClientCredentialsGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token string">&quot;The specified grant is not implemented.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 注意：客户端凭据由OpenIddict自动验证：</span>
        <span class="token comment">// 如果client_id或clientsecret无效，则不会调用此操作。</span>

        <span class="token class-name"><span class="token keyword">var</span></span> application <span class="token operator">=</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ClientId<span class="token punctuation">)</span> <span class="token operator">??</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;The application cannot be found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个新的ClaimsIdentity，其中包含</span>
        <span class="token comment">// 将用于创建一个id_token、一个令牌或一个代码。</span>
        <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用client_id作为主题标识符。</span>
        identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetClientIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetDisplayNameAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        identity<span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span><span class="token keyword">static</span> claim <span class="token operator">=&gt;</span> claim<span class="token punctuation">.</span>Type <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 允许将“名称”声明存储在访问令牌和身份令牌中</span>
            <span class="token comment">// 授予“profile”作用域时（通过调用principle.SSetScope（…））。</span>
            Claims<span class="token punctuation">.</span>Name <span class="token keyword">when</span> claim<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">HasScope</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Profile<span class="token punctuation">)</span>
                <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">,</span> Destinations<span class="token punctuation">.</span>IdentityToken <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token comment">// 否则，只将声明存储在访问令牌中。</span>
            _ <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Destinations<span class="token punctuation">.</span>AccessToken <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注册您的客户端应用程序（例如，从 IHostedService 实现）：</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostedService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceProvider</span> _serviceProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span>
        <span class="token operator">=&gt;</span> _serviceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> _serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreatedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> manager <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOpenIddictApplicationManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIddictApplicationDescriptor</span>
            <span class="token punctuation">{</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;console&quot;</span><span class="token punctuation">,</span>
                ClientSecret <span class="token operator">=</span> <span class="token string">&quot;388D45FA-B36B-4988-BA59-B187D329C207&quot;</span><span class="token punctuation">,</span>
                DisplayName <span class="token operator">=</span> <span class="token string">&quot;My client application&quot;</span><span class="token punctuation">,</span>
                Permissions <span class="token operator">=</span>
                <span class="token punctuation">{</span>
                    Permissions<span class="token punctuation">.</span>Endpoints<span class="token punctuation">.</span>Token<span class="token punctuation">,</span>
                    Permissions<span class="token punctuation">.</span>GrantTypes<span class="token punctuation">.</span>ClientCredentials
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行应用程序之前，请确保通过运行 Add-Migration 和 Update-Database 更新数据库中的 OpenIddict 表。</p><h2 id="选择正确的流程" tabindex="-1"><a class="header-anchor" href="#选择正确的流程" aria-hidden="true">#</a> 选择正确的流程</h2>`,6),W={href:"https://datatracker.ietf.org/doc/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},j={href:"https://openid.net/specs/openid-connect-core-1_0.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth",target:"_blank",rel:"noopener noreferrer"},X={href:"https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://datatracker.ietf.org/doc/html/rfc6749#section-4.3",target:"_blank",rel:"noopener noreferrer"},$={href:"https://datatracker.ietf.org/doc/html/rfc6749#section-4.4",target:"_blank",rel:"noopener noreferrer"},J=e('<p>虽然这不是针对 OpenIddict 的特定内容，但在实现自己的授权服务器时选择最佳流程是一个重要的先决条件；因此，这里简要介绍一下不同的 OAuth 2.0 / OpenID Connect 流程。</p><h3 id="非交互式流程" tabindex="-1"><a class="header-anchor" href="#非交互式流程" aria-hidden="true">#</a> 非交互式流程</h3><h4 id="资源拥有者密码凭据授权-不建议用于新的应用程序" tabindex="-1"><a class="header-anchor" href="#资源拥有者密码凭据授权-不建议用于新的应用程序" aria-hidden="true">#</a> 资源拥有者密码凭据授权（不建议用于新的应用程序）</h4><p>受基本身份验证直接启发，资源拥有者密码凭据授权（缩写为ROPC）在概念上是最简单的OAuth 2.0流程：客户端应用程序要求用户输入其用户名/密码，使用用户凭据（根据授权服务器定义的客户端身份验证策略，可能还需要包括自己的客户端凭据）向授权服务器发送令牌请求，并获得可用于检索用户资源的访问令牌。</p><figure><img src="'+u+'" alt="资源所有者密码凭据流" tabindex="0" loading="lazy"><figcaption>资源所有者密码凭据流</figcaption></figure>',5);function K(nn,sn){const a=l("ExternalLinkIcon");return o(),c("div",null,[s("div",d,[k,s("p",null,[n("OpenIddict 是一个开源且通用的框架，用于在任何 "),s("a",v,[n("ASP.NET"),t(a)]),n(" Core 2.1（及更高版本）和传统的 "),s("a",m,[n("ASP.NET"),t(a)]),n(" 4.6.1（及更高版本）应用程序中构建符合标准的 OAuth 2.0 / OpenID Connect 服务器。")])]),i(" more "),b,h,s("p",null,[n("OpenIddict 是一个开源且通用的框架，用于在任何 "),s("a",f,[n("ASP.NET"),t(a)]),n(" Core 2.1（及更高版本）和传统的 "),s("a",g,[n("ASP.NET"),t(a)]),n(" 4.6.1（及更高版本）应用程序中构建符合标准的 OAuth 2.0 / OpenID Connect 服务器。")]),s("p",null,[n("OpenIddict 诞生于2015年末，最初基于 AspNet.Security.OpenIdConnect.Server（代号 ASOS），这是一个低级别的 OpenID Connect 服务器中间件，受到 Microsoft 为 OWIN 项目开发的 OAuth 2.0 授权服务器中间件以及 "),s("a",y,[n("ASP.NET"),t(a)]),n(" Core 首个 OpenID Connect 服务器的启发。")]),_,s("p",null,[n("作为这个过程的一部分，OpenIddict 3.0 添加了对 "),s("a",w,[n("ASP.NET"),t(a)]),n(" 4.6.1（及更高版本）的原生支持，使其成为替换 "),A,n(" 和 "),C,n(" 的绝佳选择，无需迁移到 "),s("a",S,[n("ASP.NET"),t(a)]),n(" Core。")]),I,O,s("p",null,[n("与其他解决方案不同，OpenIddict 专注于授权过程的 OAuth 2.0 / OpenID Connect 协议方面，并将用户身份验证交给实现者：OpenIddict 可与任何形式的用户身份验证（如密码、令牌、联合身份验证或集成 Windows 认证）原生配合使用。虽然方便，但不需要使用类似于 "),s("a",P,[n("ASP.NET"),t(a)]),n(" Core Identity 的成员资格堆栈。")]),x,s("p",null,[n("与 "),T,n(" 类似，OpenIddict 允许在自定义控制器操作或任何其他能够钩入 "),s("a",q,[n("ASP.NET"),t(a)]),n(" Core 或 OWIN 请求处理管道的中间件中处理授权、注销和令牌请求。在这种情况下，OpenIddict 将始终首先验证传入请求（例如，通过确保强制参数存在且有效），然后允许调用其余的管道：如果发生任何验证错误，则 OpenIddict 会在到达用户定义的控制器操作或自定义中间件之前自动拒绝请求。")]),E,s("p",null,[n("使用 OpenIddict 实现自定义 OpenID Connect 服务器的最简单选项是克隆 "),s("a",N,[n("openiddict-samples"),t(a)]),n(" 存储库中的官方示例之一。")]),D,s("ul",null,[s("li",null,[s("p",null,[n("安装 "),s("a",R,[n(".NET Core 3.1（或更高版本）"),t(a)]),n("工具。")])]),s("li",null,[s("p",null,[n("有一个现有项目或创建一个新项目：在使用 Visual Studio 的默认 "),s("a",M,[n("ASP.NET"),t(a)]),n(" Core 模板创建新项目时，强烈建议使用单独的用户帐户身份验证，因为它会自动包括基于 Razor Pages 的默认 "),s("a",U,[n("ASP.NET"),t(a)]),n(" Core Identity UI。")])])]),H,s("ul",null,[s("li",null,[n("确保 "),s("a",V,[n("ASP.NET"),t(a)]),n(" Core 身份验证中间件在正确的位置正确注册：")])]),F,s("div",z,[B,s("p",null,[n("默认情况下，OpenIddict Entity Framework Core 集成使用 string 作为主键的默认类型。如果要使用其他类型，请阅读 "),s("a",G,[n("Entity Framework Core 集成：使用自定义主键类型"),t(a)]),n("。")])]),L,s("p",null,[n("OpenIddict 内置支持 "),s("a",W,[n("OAuth 2.0"),t(a)]),n(" 和 "),s("a",j,[n("OpenID Connect"),t(a)]),n(" 核心规范定义的所有标准流程："),s("a",Q,[n("授权码流程"),t(a)]),n("、"),s("a",X,[n("隐式流程"),t(a)]),n("、"),s("a",Y,[n("混合流程"),t(a)]),n("（基本上是前两个流程的混合）、"),s("a",Z,[n("资源拥有者密码凭据授权"),t(a)]),n("和"),s("a",$,[n("客户端凭证授权"),t(a)]),n("。")]),J])}const tn=p(r,[["render",K],["__file","openiddict.html.vue"]]);export{tn as default};
