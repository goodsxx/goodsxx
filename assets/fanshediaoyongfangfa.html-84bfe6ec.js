const n=JSON.parse('{"key":"v-429d6fec","path":"/columns/blog-posts/lingsuineirong/houduan/fanshediaoyongfangfa.html","title":"通过反射调用类中的方法","lang":"zh-CN","frontmatter":{"title":"通过反射调用类中的方法","date":"2022-01-07T00:00:00.000Z","category":["后端"],"tag":[".NET","C#"],"description":"✨✨✨✨✨ 在C#中利用反射调用类中的方法 创建测试类 利用反射调用类中的方法 using System.Reflection; namespace TestDemo; public class TestService { private Type _type; private MethodInfo? testA; private MethodInfo? testB; public async Task Test&lt;T&gt;(T t) { _type = t.GetType(); MethodInfo[] methods = _type.GetMethods(); testA = methods.FirstOrDefault(x =&gt; x.Name.Equals(\\"TestA\\", StringComparison.Ordinal)); testB = methods.FirstOrDefault(x =&gt; x.Name.Equals(\\"TestB\\", StringComparison.Ordinal)); Task taskA = testA?.Invoke(t, null) as Task; await taskA; object a = taskA.GetType().GetProperty(\\"Result\\").GetValue(taskA, null); Console.WriteLine(a.ToString()); Task taskB = testB?.Invoke(t, new object[] { \\"111\\", \\"222\\" }) as Task; await taskB; object b = taskB.GetType().GetProperty(\\"Result\\").GetValue(taskB, null); Console.WriteLine(b.ToString()); } }","head":[["meta",{"property":"og:url","content":"http://goodsxx.cn/columns/blog-posts/lingsuineirong/houduan/fanshediaoyongfangfa.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"通过反射调用类中的方法"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 在C#中利用反射调用类中的方法 创建测试类 利用反射调用类中的方法 using System.Reflection; namespace TestDemo; public class TestService { private Type _type; private MethodInfo? testA; private MethodInfo? testB; public async Task Test&lt;T&gt;(T t) { _type = t.GetType(); MethodInfo[] methods = _type.GetMethods(); testA = methods.FirstOrDefault(x =&gt; x.Name.Equals(\\"TestA\\", StringComparison.Ordinal)); testB = methods.FirstOrDefault(x =&gt; x.Name.Equals(\\"TestB\\", StringComparison.Ordinal)); Task taskA = testA?.Invoke(t, null) as Task; await taskA; object a = taskA.GetType().GetProperty(\\"Result\\").GetValue(taskA, null); Console.WriteLine(a.ToString()); Task taskB = testB?.Invoke(t, new object[] { \\"111\\", \\"222\\" }) as Task; await taskB; object b = taskB.GetType().GetProperty(\\"Result\\").GetValue(taskB, null); Console.WriteLine(b.ToString()); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-04T08:22:09.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:published_time","content":"2022-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-04T08:22:09.000Z"}]]},"headers":[{"level":2,"title":"创建测试类","slug":"创建测试类","link":"#创建测试类","children":[]},{"level":2,"title":"利用反射调用类中的方法","slug":"利用反射调用类中的方法","link":"#利用反射调用类中的方法","children":[]},{"level":2,"title":"实例化实现类并调用方法","slug":"实例化实现类并调用方法","link":"#实例化实现类并调用方法","children":[{"level":3,"title":"打印结果","slug":"打印结果","link":"#打印结果","children":[]}]}],"git":{"createdTime":1672820529000,"updatedTime":1672820529000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":1}]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"columns/blog-posts/lingsuineirong/houduan/fanshediaoyongfangfa.md","localizedDate":"2022年1月7日","excerpt":"<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">✨✨✨✨✨</p>\\n<p>在C#中利用反射调用类中的方法</p>\\n</div>\\n<!--more-->\\n<h2> 创建测试类</h2>\\n\\n<h2> 利用反射调用类中的方法</h2>\\n<div class=\\"language-csharp line-numbers-mode\\" data-ext=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Reflection</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">TestDemo</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TestService</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Type</span> _type<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">MethodInfo<span class=\\"token punctuation\\">?</span></span> testA<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">MethodInfo<span class=\\"token punctuation\\">?</span></span> testB<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token generic-method\\"><span class=\\"token function\\">Test</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> t<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        _type <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">MethodInfo<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> methods <span class=\\"token operator\\">=</span> _type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetMethods</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        testA <span class=\\"token operator\\">=</span> methods<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FirstOrDefault</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> x<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"TestA\\"</span><span class=\\"token punctuation\\">,</span> StringComparison<span class=\\"token punctuation\\">.</span>Ordinal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        testB <span class=\\"token operator\\">=</span> methods<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FirstOrDefault</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> x<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"TestB\\"</span><span class=\\"token punctuation\\">,</span> StringComparison<span class=\\"token punctuation\\">.</span>Ordinal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">Task</span> taskA <span class=\\"token operator\\">=</span> testA<span class=\\"token punctuation\\">?.</span><span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> <span class=\\"token class-name\\">Task</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">await</span> taskA<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span> a <span class=\\"token operator\\">=</span> taskA<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Result\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetValue</span><span class=\\"token punctuation\\">(</span>taskA<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">Task</span> taskB <span class=\\"token operator\\">=</span> testB<span class=\\"token punctuation\\">?.</span><span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"111\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"222\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> <span class=\\"token class-name\\">Task</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">await</span> taskB<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span> b <span class=\\"token operator\\">=</span> taskB<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Result\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetValue</span><span class=\\"token punctuation\\">(</span>taskB<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
