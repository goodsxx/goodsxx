import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,d as a}from"./app-DbRsw7jK.js";const t={},l=a(`<div class="hint-container tip"><p class="hint-container-title">✨✨✨✨✨</p><p>在几分钟内设置并收集遥测数据！</p><p>OpenTelemetry Collector 接收跟踪、指标和日志，处理遥测数据，并使用其组件将其导出到各种可观察性后端。有关 Collector 的概念概述，请参见 Collector。</p><p>您将学习如何在不到五分钟内完成以下操作：</p><ol><li>设置并运行 OpenTelemetry Collector。</li><li>发送遥测数据并查看其被 Collector 处理。</li></ol></div><h2 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件"><span>先决条件</span></a></h2><p>确保您的开发环境具有以下内容。此页面假设您正在使用 bash。根据需要适配配置和命令。</p><ul><li>Docker 或任何兼容的容器运行时。</li><li>Go 1.20 或更高版本</li><li>GOBIN 环境变量已设置；如果未设置，适当初始化它，例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span><span class="token variable">\${GOBIN<span class="token operator">:-</span>$(go env GOPATH)<span class="token operator">/</span>bin}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="设置环境" tabindex="-1"><a class="header-anchor" href="#设置环境"><span>设置环境</span></a></h2><ol><li>拉取 OpenTelemetry Collector Docker 镜像：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull otel/opentelemetry-collector:0.104.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>安装 telemetrygen 工具：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go <span class="token function">install</span> github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此工具可以模拟生成跟踪、指标和日志的客户端。</p><h2 id="生成和收集遥测数据" tabindex="-1"><a class="header-anchor" href="#生成和收集遥测数据"><span>生成和收集遥测数据</span></a></h2><ol start="3"><li>启动 Collector：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:4317:4317 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:55679:55679 <span class="token punctuation">\\</span>
  otel/opentelemetry-collector:0.104.0 <span class="token punctuation">\\</span>
  <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">tee</span> collector-output.txt <span class="token comment"># 可选地 tee 输出以便以后更容易搜索</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在另一个终端窗口中，生成一些示例跟踪：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$GOBIN</span>/telemetrygen traces --otlp-insecure <span class="token parameter variable">--traces</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在工具生成的输出中，您应该看到确认生成了跟踪的消息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2024</span>-01-16T14:33:15.692-0500  INFO  traces/worker.go:99  traces generated  <span class="token punctuation">{</span><span class="token string">&quot;worker&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token string">&quot;traces&quot;</span><span class="token builtin class-name">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token number">2024</span>-01-16T14:33:15.692-0500  INFO  traces/traces.go:58  stop the batch span processor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了更容易查看相关输出，您可以过滤它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$GOBIN</span>/telemetrygen traces --otlp-insecure <span class="token punctuation">\\</span>
  <span class="token parameter variable">--traces</span> <span class="token number">3</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;start|traces|stop&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>在运行 Collector 容器的终端窗口中，您应该看到类似于以下示例的跟踪摄取活动：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;^Span|(ID|Name|Kind|time|Status \\w+)\\s+:&#39;</span> ./collector-output.txt
Span <span class="token comment">#0</span>
    Trace ID       <span class="token builtin class-name">:</span> f30faffbde5fcf71432f89da1bf7bc14
    Parent ID      <span class="token builtin class-name">:</span> 6f1ff7f9cf4ec1c7
    ID             <span class="token builtin class-name">:</span> 8d1e820c1ac57337
    Name           <span class="token builtin class-name">:</span> okey-dokey
    Kind           <span class="token builtin class-name">:</span> Server
    Start <span class="token function">time</span>     <span class="token builtin class-name">:</span> <span class="token number">2024</span>-01-16 <span class="token number">14</span>:13:54.585877 +0000 UTC
    End <span class="token function">time</span>       <span class="token builtin class-name">:</span> <span class="token number">2024</span>-01-16 <span class="token number">14</span>:13:54.586 +0000 UTC
    Status code    <span class="token builtin class-name">:</span> Unset
    Status message <span class="token builtin class-name">:</span>
Span <span class="token comment">#1</span>
    Trace ID       <span class="token builtin class-name">:</span> f30faffbde5fcf71432f89da1bf7bc14
    Parent ID      <span class="token builtin class-name">:</span>
    ID             <span class="token builtin class-name">:</span> 6f1ff7f9cf4ec1c7
    Name           <span class="token builtin class-name">:</span> lets-go
    Kind           <span class="token builtin class-name">:</span> Client
    Start <span class="token function">time</span>     <span class="token builtin class-name">:</span> <span class="token number">2024</span>-01-16 <span class="token number">14</span>:13:54.585877 +0000 UTC
    End <span class="token function">time</span>       <span class="token builtin class-name">:</span> <span class="token number">2024</span>-01-16 <span class="token number">14</span>:13:54.586 +0000 UTC
    Status code    <span class="token builtin class-name">:</span> Unset
    Status message <span class="token builtin class-name">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>打开 http://localhost:55679/debug/tracez 并选择表中的一个示例，以查看您刚刚生成的跟踪。</li><li>完成后，使用 Control-C 关闭 Collector 容器。</li></ol>`,23),i=[l];function c(o,r){return n(),s("div",null,i)}const m=e(t,[["render",c],["__file","quick-start.html.vue"]]),u=JSON.parse('{"path":"/articles/distributed-middleware/opentelemetry/collector/quick-start.html","title":"快速开始","lang":"zh-CN","frontmatter":{"title":"快速开始","date":"2024-07-04T00:00:00.000Z","order":1,"category":["分布式中间件"],"description":"✨✨✨✨✨ 在几分钟内设置并收集遥测数据！ OpenTelemetry Collector 接收跟踪、指标和日志，处理遥测数据，并使用其组件将其导出到各种可观察性后端。有关 Collector 的概念概述，请参见 Collector。 您将学习如何在不到五分钟内完成以下操作： 设置并运行 OpenTelemetry Collector。 发送遥测数据并...","head":[["meta",{"property":"og:url","content":"http://blog.goodsxx.cn/articles/distributed-middleware/opentelemetry/collector/quick-start.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"快速开始"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 在几分钟内设置并收集遥测数据！ OpenTelemetry Collector 接收跟踪、指标和日志，处理遥测数据，并使用其组件将其导出到各种可观察性后端。有关 Collector 的概念概述，请参见 Collector。 您将学习如何在不到五分钟内完成以下操作： 设置并运行 OpenTelemetry Collector。 发送遥测数据并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-04T08:55:13.000Z"}],["meta",{"property":"article:author","content":"SongXinXin"}],["meta",{"property":"article:published_time","content":"2024-07-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-04T08:55:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速开始\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-04T08:55:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SongXinXin\\"}]}"]]},"headers":[{"level":2,"title":"先决条件","slug":"先决条件","link":"#先决条件","children":[]},{"level":2,"title":"设置环境","slug":"设置环境","link":"#设置环境","children":[]},{"level":2,"title":"生成和收集遥测数据","slug":"生成和收集遥测数据","link":"#生成和收集遥测数据","children":[]}],"git":{"createdTime":1720083313000,"updatedTime":1720083313000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":1}]},"readingTime":{"minutes":1.95,"words":584},"filePathRelative":"articles/distributed-middleware/opentelemetry/collector/quick-start.md","localizedDate":"2024年7月4日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">✨✨✨✨✨</p>\\n<p>在几分钟内设置并收集遥测数据！</p>\\n<p>OpenTelemetry Collector 接收跟踪、指标和日志，处理遥测数据，并使用其组件将其导出到各种可观察性后端。有关 Collector 的概念概述，请参见 Collector。</p>\\n<p>您将学习如何在不到五分钟内完成以下操作：</p>\\n<ol>\\n<li>设置并运行 OpenTelemetry Collector。</li>\\n<li>发送遥测数据并查看其被 Collector 处理。</li>\\n</ol>\\n</div>\\n","autoDesc":true}');export{m as comp,u as data};
