import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c,a as s,e as n,w as a,d as t,b as i}from"./app-CfsLqU1F.js";const p="/assets/1650815065456-BGp6_b_0.png",d="/assets/1650815121716-Ep-erx-7.png",u="/assets/1650815644534-DQKHWOME.png",m="/assets/1650816202369-B3tKEsKC.png",v="/assets/1650816306998-o7vsec9a.png",b="/assets/1650816400767-Bi7IK3Yv.png",g="/assets/1650816444025-3s7MpQ2_.png",h="/assets/1650817147035-CFrh5Y7h.png",k="/assets/1650817330415-BEVMiZRF.png",f="/assets/1650817479415-BpP2ZWd3.png",_={},x=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"✨✨✨✨✨"),s("p",null,"通过gitee仓库的WebHook回调实现VuePress项目的自动化部署")],-1),y={id:"在linux上部署vuepress",tabindex:"-1"},P={class:"header-anchor",href:"#在linux上部署vuepress"},V=t(`<h2 id="新建脚本文件" tabindex="-1"><a class="header-anchor" href="#新建脚本文件"><span>新建脚本文件</span></a></h2><ol><li><p>在VuePress项目根目录中新建shell脚本文件 <code>start.sh</code></p></li><li><p>编辑start.sh脚本文件并上传至git仓库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token comment">#!/bin/bash</span>
  <span class="token comment"># 切入源码目录，以确保能正常执行</span>
  <span class="token builtin class-name">cd</span> /home/my/my-vuepress

  <span class="token comment"># 拉取最新代码</span>
  <span class="token function">git</span> pull

  <span class="token comment"># 杀死目前已启动进程</span>
  <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">node</span> <span class="token operator">|</span> <span class="token function">grep</span> vuepress<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">\`</span></span>
  <span class="token builtin class-name">echo</span> --- the process is <span class="token variable">$ID</span> ---
  <span class="token function">kill</span> <span class="token parameter variable">-9</span>  <span class="token variable">$ID</span>
  <span class="token builtin class-name">echo</span>  <span class="token string">&quot;Killed <span class="token variable">$ID</span>&quot;</span>
  <span class="token comment"># 更新包</span>
  <span class="token function">npm</span> i
  <span class="token comment"># 后台启动</span>
  <span class="token function">nohup</span> <span class="token function">npm</span> run pro<span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在Linux上拉取更新</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/my/my-vuepress
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为脚本文件授予权限</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">775</span> /home/my/my-vuepress/start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="编写接口用于在接口调用时执行脚本" tabindex="-1"><a class="header-anchor" href="#编写接口用于在接口调用时执行脚本"><span>编写接口用于在接口调用时执行脚本</span></a></h2><p><strong>此处以Asp.Net Core Web Api为例</strong></p><ol><li><p>打开VS2022，选择 <code>ASP.Net Core Web Api</code> 项目</p><figure><img src="`+p+'" alt="创建项目" tabindex="0" loading="lazy"><figcaption>创建项目</figcaption></figure></li><li><p>为项目命名，勾选&#39;将解决方案和项目放在同一目录&#39;</p><figure><img src="'+d+'" alt="为项目命名" tabindex="0" loading="lazy"><figcaption>为项目命名</figcaption></figure></li><li><p>框架选择.NET6.0</p><figure><img src="'+u+`" alt="选择框架" tabindex="0" loading="lazy"><figcaption>选择框架</figcaption></figure></li><li><p>在Controllers文件夹下新建WebHookController.cs</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>namespace ScriptExecutor.Controllers
{
    [ApiController]
    [Route(&quot;[controller]/[action]&quot;)]
    public class WebHookController : ControllerBase
    {
        [HttpPost(&quot;ExecoutScript&quot;)]
        public string Post([FromBody] object inDto)
        {
            try
            {
                Process.Start(&quot;./start.sh&quot;);
                return &quot;执行成功！&quot;;
            }
            catch (Exception ex)
            {
                return $&quot;执行失败：{ex.Message}&quot;;
            }
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在Program.cs类中，配置项目的启动端口</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>builder.WebHost.UseUrls(new[] { &quot;http://*:8080&quot; });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="发布项目" tabindex="-1"><a class="header-anchor" href="#发布项目"><span>发布项目</span></a></h2><ol><li><p>右键项目，选择&#39;发布&#39;</p><figure><img src="`+m+'" alt="发布" tabindex="0" loading="lazy"><figcaption>发布</figcaption></figure></li><li><p>选择&#39;文件夹&#39;，直接点击&#39;下一步&#39;——&gt;&#39;完成&#39;</p><figure><img src="'+v+'" alt="文件夹发布" tabindex="0" loading="lazy"><figcaption>文件夹发布</figcaption></figure><figure><img src="'+b+'" alt="完成" tabindex="0" loading="lazy"><figcaption>完成</figcaption></figure></li><li><p>点击&#39;发布&#39;</p><figure><img src="'+g+'" alt="发布" tabindex="0" loading="lazy"><figcaption>发布</figcaption></figure></li></ol><h2 id="部署回调接口" tabindex="-1"><a class="header-anchor" href="#部署回调接口"><span>部署回调接口</span></a></h2>',8),q=s("li",null,[s("p",null,"将bin\\Release\\net6.0\\publish\\publish文件夹的下的所有项目上传至linux服务器中的/home/my/script-executor文件夹下")],-1),w=t(`<li><p>进入home/my/my-vuepress路径下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/my/my-vuepress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行ScriptExecutor项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dotnet /home/my/script-executor/ScriptExecutor.dll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置git仓库的WebHook，使其在推送代码时自动触发接口(此处以gitee为例)</p><p><img src="`+h+'" alt="配置webhook" title="配置webhook" loading="lazy"><br> 6. 配置webhook的回调地址</p><figure><img src="'+k+'" alt="配置接口回调地址" tabindex="0" loading="lazy"><figcaption>配置回调地址</figcaption></figure><ol start="7"><li><p>测试效果</p><figure><img src="'+f+'" alt="效果" tabindex="0" loading="lazy"><figcaption>效果</figcaption></figure><p><strong>返回执行成功，说明脚本已成功执行，之后提交代码时，便会通过webhook回调接口去触发脚本的执行，从而实现vuepress的自动发布</strong></p></li></ol></li>',3),C=s("h2",{id:"设置项目开机启动",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#设置项目开机启动"},[s("span",null,"设置项目开机启动")])],-1),z=t(`<li><p>在linux服务器root目录下新建start.sh脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 切入源码目录，以确保能正常执行</span>
<span class="token builtin class-name">cd</span> /home/my/my-blog
<span class="token comment"># 启动webhook接口</span>
<span class="token function">nohup</span>  dotnet /home/my/script-executor/ScriptExecutor.dll
<span class="token comment"># 拉取最新代码1</span>
<span class="token function">git</span> pull

<span class="token comment"># 杀死目前已启动进程</span>
<span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">node</span> <span class="token operator">|</span> <span class="token function">grep</span> vuepress<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> --- the process is <span class="token variable">$ID</span> ---
<span class="token function">kill</span> <span class="token parameter variable">-9</span>  <span class="token variable">$ID</span>
<span class="token builtin class-name">echo</span>  <span class="token string">&quot;Killed <span class="token variable">$ID</span>&quot;</span>
<span class="token comment"># 更新包</span>
<span class="token function">yarn</span>
<span class="token comment"># 启动</span>
<span class="token function">nohup</span> <span class="token function">yarn</span> pro<span class="token operator">&amp;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1);function S(D,E){const e=o("RouteLink");return r(),c("div",null,[x,s("h2",y,[s("a",P,[s("span",null,[n(e,{to:"/about-this-website/vuepress-release.html"},{default:a(()=>[i("在Linux上部署VuePress")]),_:1})])])]),V,s("ol",null,[q,s("li",null,[s("p",null,[n(e,{to:"/articles/linux/installation-dotnet.html"},{default:a(()=>[i("在Linux上安装.Net6环境")]),_:1})])]),w]),C,s("ol",null,[z,s("li",null,[s("p",null,[n(e,{to:"/articles/linux/boot-up-script.html"},{default:a(()=>[i("在Linux上设置shell脚本开机启动")]),_:1})])])])])}const T=l(_,[["render",S],["__file","vuepress-auto-release.html.vue"]]),B=JSON.parse('{"path":"/about-this-website/vuepress-auto-release.html","title":"VuePress自动化部署","lang":"zh-CN","frontmatter":{"title":"VuePress自动化部署","date":"2022-04-25T00:00:00.000Z","category":["VuePress"],"tag":["VuePress","自动发布","个人博客"],"timeline":true,"order":4,"description":"✨✨✨✨✨ 通过gitee仓库的WebHook回调实现VuePress项目的自动化部署","head":[["meta",{"property":"og:url","content":"http://blog.goodsxx.cn/about-this-website/vuepress-auto-release.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"VuePress自动化部署"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 通过gitee仓库的WebHook回调实现VuePress项目的自动化部署"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-23T07:58:23.000Z"}],["meta",{"property":"article:author","content":"SongXinXin"}],["meta",{"property":"article:tag","content":"VuePress"}],["meta",{"property":"article:tag","content":"自动发布"}],["meta",{"property":"article:tag","content":"个人博客"}],["meta",{"property":"article:published_time","content":"2022-04-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-23T07:58:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VuePress自动化部署\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-23T07:58:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SongXinXin\\"}]}"]]},"headers":[{"level":2,"title":"在Linux上部署VuePress","slug":"在linux上部署vuepress","link":"#在linux上部署vuepress","children":[]},{"level":2,"title":"新建脚本文件","slug":"新建脚本文件","link":"#新建脚本文件","children":[]},{"level":2,"title":"编写接口用于在接口调用时执行脚本","slug":"编写接口用于在接口调用时执行脚本","link":"#编写接口用于在接口调用时执行脚本","children":[]},{"level":2,"title":"发布项目","slug":"发布项目","link":"#发布项目","children":[]},{"level":2,"title":"部署回调接口","slug":"部署回调接口","link":"#部署回调接口","children":[]},{"level":2,"title":"设置项目开机启动","slug":"设置项目开机启动","link":"#设置项目开机启动","children":[]}],"git":{"createdTime":1668354867000,"updatedTime":1677139103000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":6}]},"readingTime":{"minutes":2.47,"words":740},"filePathRelative":"about-this-website/vuepress-auto-release.md","localizedDate":"2022年4月25日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">✨✨✨✨✨</p>\\n<p>通过gitee仓库的WebHook回调实现VuePress项目的自动化部署</p>\\n</div>\\n","autoDesc":true}');export{T as comp,B as data};
