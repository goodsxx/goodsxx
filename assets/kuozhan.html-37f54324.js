import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as t,b as n,f as c}from"./app-203f50af.js";const i="/assets/1675666592226-30f0cc63.png",o={},p=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"✨✨✨✨✨"),n("p",null,"MAUI相关知识扩展")],-1),l=c('<h2 id="messenger" tabindex="-1"><a class="header-anchor" href="#messenger" aria-hidden="true">#</a> Messenger</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>接口 IMessenger 是可用于在不同对象之间交换消息的类型协定。</p><p>当两个对象之间需要建立松耦合关系时，特别适合使用消息机制。如ViewModel需要控制View进行某些操作时，如弹出对话框、播放动画，由于ViewModel对View是无感的，我们不能在ViewModel中去操作View，否则会造成ViewModel对View的依赖。另外，ViewModel层之间、以及View页面之间，也可能需要通过消息传递来完成一些交互。CommunityToolkit.Mvvm提供了比较完善的消息机制，以下内容主要介绍它的使用。</p><p>使用前，需安装nuget包：CommunityToolkit.Mvvm。</p></div><h3 id="基本过程" tabindex="-1"><a class="header-anchor" href="#基本过程" aria-hidden="true">#</a> 基本过程</h3><figure><img src="'+i+`" alt="基本过程" tabindex="0" loading="lazy"><figcaption>基本过程</figcaption></figure><p>如图所示，一个消息的收发，或者叫订阅与发布，主要有三个过程：</p><ol><li><strong>创建信使和消息类型：</strong> 信使的作用：一是起到消息发布者与订阅者的桥梁作用；二是携带消息。在代码层面，信使是派生自 <code>ValueChangedMessage&lt;T&gt;</code> 或 <code>RequestMessage&lt;T&gt;</code> 的普通类，其中泛型 T 为消息的类型。</li><li><strong>订阅消息(Register)：</strong> 消息订阅者通过 <code>WeakReferenceMessenger.Default.Register&lt;T&gt;(this,(r,m)=&gt;{});</code> 订阅消息，其中泛型T为信使类，只要这个信使类被发布，它就能收到通知和消息。<code>(r,m)=&gt;{}</code> 为订阅者收到通知后的执行逻辑，是一个 Lambda 函数，也有叫事件处理者 Handler 。其中参数 r 指消息订阅所在的这个对象，通过 this 传入，通过 r 可以在 Lambda 函数中引用其它成员；参数 m 就是信使携带的消息对象。</li><li><strong>发布消息(Send)：</strong> 消息发布者通过 <code>WeakReferenceMessenger.Default.Send(new一个信息类对象)</code> 发布消息。</li></ol><h3 id="创建信使" tabindex="-1"><a class="header-anchor" href="#创建信使" aria-hidden="true">#</a> 创建信使</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//信使类为HiMessenger，消息类型为string</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiMessenger</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValueChangedMessage<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">HiMessenger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token comment">//创建信使对象时，通过构造函数初始化消息</span>
    <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="订阅消息" tabindex="-1"><a class="header-anchor" href="#订阅消息" aria-hidden="true">#</a> 订阅消息</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>WeakReferenceMessenger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HiMessenger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在这里处理消息，r 是接收方，m 是输入消息。使用作为输入传递的接收者使得 lambda 表达式不会捕获&quot;this&quot;,从而提高了性能。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布消息" tabindex="-1"><a class="header-anchor" href="#发布消息" aria-hidden="true">#</a> 发布消息</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>WeakReferenceMessenger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HiMessenger</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,I&#39;m functionMC.I come from China.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function r(d,u){return a(),e("div",null,[p,t(" more "),l])}const g=s(o,[["render",r],["__file","kuozhan.html.vue"]]);export{g as default};
