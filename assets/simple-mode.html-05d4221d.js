import{_ as c,X as u,Y as i,Z as p,a0 as r,a2 as a,$ as n,a3 as k,F as d,a1 as s}from"./framework-8e4c1295.js";const m={},b=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"✨✨✨✨✨"),n("p",null,"RabbitMQ 简单模式（Simple Mode）是 RabbitMQ 最基础的一种使用模式，也称为点对点模式。在简单模式中，一个生产者向一个消费者发送消息，消费者从队列中获取并处理该消息。这种模式非常适用于只有一个消费者需要处理任务的场景，如日志处理、计算任务等。")],-1),v=k('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>RabbitMQ 简单模式（Simple Mode）是 RabbitMQ 最基础的一种使用模式，也称为点对点模式。在简单模式中，一个生产者向一个消费者发送消息，消费者从队列中获取并处理该消息。这种模式非常适用于只有一个消费者需要处理任务的场景，如日志处理、计算任务等。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ul><li>需要对消息进行可靠传输，确保消息不会因为网络或其他问题而丢失。</li><li>需要实现简单的异步消息通信方式，以提高应用程序的响应性和可扩展性。</li><li>需要解耦应用程序中的各个组件，通过消息队列来实现组件之间的协作和数据交换。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>实现简单，易于理解和使用。</li><li>可靠的消息传输机制，保障消息的可靠性和稳定性。</li><li>支持多语言和平台，具有很好的兼容性。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>不支持多个消费者共享同一个队列，不能实现任务分发和负载均衡。</li><li>无法处理消息重复消费的问题。</li></ul><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2>',10),g=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Producer"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),s(),n("span",{class:"token function"},"Main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" args"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建连接工厂对象，指定主机名和登录凭据信息"),s(`
        `),n("span",{class:"token class-name"},"ConnectionFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"{"),s(` 
            HostName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"192.168.3.100"'),n("span",{class:"token punctuation"},","),s(` 
            Port`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"5672"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"//默认端口"),s(`
            UserName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),n("span",{class:"token punctuation"},","),s(` 
            Password `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 创建连接对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" connection "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 创建信道对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateModel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 声明队列，如果不存在就创建"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"durable"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"exclusive"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"autoDelete"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"arguments"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 发送消息到队列中"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string")]),s(" message "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello World!"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" body "),n("span",{class:"token operator"},"="),s(" Encoding"),n("span",{class:"token punctuation"},"."),s("UTF8"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetBytes"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicPublish"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"routingKey"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"basicProperties"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"body"),n("span",{class:"token punctuation"},":"),s(" body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" [生产者] 发送： {0}"'),n("span",{class:"token punctuation"},","),s(" message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" 按 [enter] 键退出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ReadLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("p",null,[n("strong",null,"参数说明")],-1),y=n("blockquote",null,[n("p",null,[n("strong",null,"QueueDeclare：")]),n("ul",null,[n("li",null,[n("strong",null,[n("code",null,"queue")]),s(" : 队列的名称，用于标识要发送或消费的消息队列。")]),n("li",null,[n("strong",null,[n("code",null,"durable")]),s(" : 是否持久化，如果为 true，则 RabbitMQ 会将该队列存储在磁盘中，即使 RabbitMQ 服务重启也不会丢失。默认为 false。")]),n("li",null,[n("strong",null,[n("code",null,"exclusive")]),s(" : 是否排他性，如果为 true，则该队列只能被当前连接使用，并在连接关闭时删除。默认为 false。")]),n("li",null,[n("strong",null,[n("code",null,"autoDelete")]),s(" : 是否自动删除，如果为 true，则当队列没有任何消费者时，RabbitMQ 会自动删除该队列。默认为 false。")]),n("li",null,[n("strong",null,[n("code",null,"arguments")]),s(" : 队列参数，用于设置队列的特定参数选项。")])])],-1),f=n("blockquote",null,[n("p",null,[n("strong",null,"BasicPublish：")]),n("ul",null,[n("li",null,[n("strong",null,[n("code",null,"exchange")]),s(" : 交换机的名称，用于标识要发送消息的目标交换机。在简单模式下通常为空字符串。")]),n("li",null,[n("strong",null,[n("code",null,"routingKey")]),s(" : 路由键，用于指定消息的路由规则，在简单模式下通常与队列名称相同。")]),n("li",null,[n("strong",null,[n("code",null,"basicProperties")]),s(" : 消息属性对象，用于设置消息的各种属性，如消息的优先级、过期时间、持久化等。在简单模式下通常为 null。")]),n("li",null,[n("strong",null,[n("code",null,"body")]),s(" : 消息体，即要发送的消息内容，可以是二进制数据流或 UTF-8 编码的文本。")])])],-1),_=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),s(),n("span",{class:"token function"},"Main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" args"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建连接工厂对象，指定主机名和登录凭据信息"),s(`
        `),n("span",{class:"token class-name"},"ConnectionFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            HostName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"192.168.3.100"'),n("span",{class:"token punctuation"},","),s(`
            Port `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5672"),n("span",{class:"token punctuation"},","),s(`
            UserName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),n("span",{class:"token punctuation"},","),s(`
            Password `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`


        `),n("span",{class:"token comment"},"// 创建连接对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" connection "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 创建信道对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateModel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 声明队列，如果不存在就创建"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"durable"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"exclusive"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"autoDelete"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"arguments"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 创建消费者对象"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" consumer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"EventingBasicConsumer"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 消息接收事件处理"),s(`
        consumer`),n("span",{class:"token punctuation"},"."),s("Received "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token punctuation"},"("),s("model"),n("span",{class:"token punctuation"},","),s(" ea"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"byte"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" body "),n("span",{class:"token operator"},"="),s(" ea"),n("span",{class:"token punctuation"},"."),s("Body"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("             "),n("span",{class:"token comment"},"// 获取消息体"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string")]),s(" message "),n("span",{class:"token operator"},"="),s(" Encoding"),n("span",{class:"token punctuation"},"."),s("UTF8"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetString"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 将消息体转换成字符串"),s(`
            Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" [消费者] 接收： {0}"'),n("span",{class:"token punctuation"},","),s(" message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 订阅队列并开始消费消息"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicConsume"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"autoAck"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"consumer"),n("span",{class:"token punctuation"},":"),s(" consumer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" 按 [enter] 键退出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ReadLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("p",null,[n("strong",null,"参数说明")],-1),C=n("blockquote",null,[n("p",null,[n("strong",null,"EventingBasicConsumer.Received：")]),n("ul",null,[n("li",null,[n("strong",null,[n("code",null,"model")]),s(" : 消费者对象所在的信道，用于处理消息确认等操作。")]),n("li",null,[n("strong",null,[n("code",null,"ea")]),s(" : BasicDeliverEventArgs 对象，包含了接收到的消息信息，如消息体、消息属性、消息标识符等。")]),n("li",null,[n("strong",null,[n("code",null,"body")]),s(" : 字节数组类型，表示消息体的二进制数据流。")]),n("li",null,[n("strong",null,[n("code",null,"message")]),s(" : string 类型，表示将消息体转换为字符串后得到的文本内容。")])])],-1),x=n("blockquote",null,[n("p",null,[n("strong",null,"BasicConsume：")]),n("ul",null,[n("li",null,[n("strong",null,[n("code",null,"autoAck")]),s(" : 是否自动确认消息，如果为 true，则 RabbitMQ 在向该消费者发送一条消息时，会自动将该消息标记为已经确认（ack），无需手动调用 BasicAck 方法进行确认。默认为 false。")]),n("li",null,[n("strong",null,[n("code",null,"consumer")]),s(" : EventingBasicConsumer 对象，用于实现消费者的事件处理和状态管理。")])])],-1),M=n("p",null,"其中，Received 事件是在消费者接收到消息时触发的，事件处理函数中获取了消息体并将其转换为字符串，然后进行输出。在订阅队列时，我们可以通过设置 autoAck 参数来控制是否需要手动确认消息处理完成。在这里，由于简单模式下只有一个消费者，所以我们将 autoAck 设置为 true，即表示收到消息后立即确认，可以避免消息被重复消费或丢失的问题。",-1),R=n("p",null,'以上代码展示了 .NET6 中 RabbitMQ 简单模式下的生产者和消费者的实现。其中，生产者端声明了名为 "hello" 的队列，并向该队列发送了一条消息，而消费者端则监听了 "hello" 队列，并在收到消息时进行处理。',-1),B=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"相关信息"),n("p",null,"在简单模式中，消息直接发送给队列，没有经过交换机的路由。为了将消息发送到指定的队列，需要在消费者端指定队列的名称，并在生产者端声明该队列。这种模式下通常使用默认的 Direct 类型交换机（Exchange），该交换机会将消息按照发布者指定的 Routing Key 直接发送到指定的队列中。")],-1);function Q(N,A){const t=d("Tabs");return u(),i("div",null,[b,p(" more "),v,r(t,{id:"73",data:[{title:"生产者"},{title:"消费者"}]},{tab0:a(({title:e,value:o,isActive:l})=>[g,h,y,f]),tab1:a(({title:e,value:o,isActive:l})=>[_,w,C,x,M]),_:1}),R,B])}const P=c(m,[["render",Q],["__file","simple-mode.html.vue"]]);export{P as default};
