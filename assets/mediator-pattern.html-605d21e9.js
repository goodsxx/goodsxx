import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-bd8f263d.js";const p={},e=t(`<div class="hint-container tip"><p class="hint-container-title">✨✨✨✨✨</p><p>中介者模式是一种行为型设计模式，它允许你减少对象之间混乱无序的依赖关系。该模式会引入一个中介者对象，它会协调多个对象之间的通信，从而让它们间接地相互作用，而非直接交互。这样可以减少对象间的耦合性，使代码更易于维护。</p></div><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>中介者模式是一种行为型设计模式，它允许你减少对象之间混乱无序的依赖关系。该模式会引入一个中介者对象，它会协调多个对象之间的通信，从而让它们间接地相互作用，而非直接交互。这样可以减少对象间的耦合性，使代码更易于维护。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>中介者模式适用于当多个对象之间存在相互关联和相互依赖的情况，并且这些关系会导致代码难以维护或扩展的情况。常见的应用场景包括：</p><ul><li>对象间存在复杂的关联关系，导致它们之间的交互变得混乱无序。</li><li>对象之间的依赖关系太过紧密，导致它们难以单独地进行测试或修改。</li><li>当一个对象需要通知多个其他对象时，采用中介者模式可以简化代码逻辑，使通信更加清晰明了。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h2><p><strong>中介者模式的优点包括：</strong></p><ul><li>减少对象之间的依赖关系，使得代码更加灵活、易于扩展。</li><li>通过引入中介者对象，可以减少对象之间的交互次数，提高代码的性能。</li><li>可以将对象之间的通信逻辑抽象出来，使得代码更加清晰易懂。</li></ul><p><strong>中介者模式的缺点包括：</strong></p><ul><li>引入中介者对象会增加代码的复杂度。</li><li>中介者对象会成为系统的瓶颈，如果中介者对象处理不当，会影响整个系统的性能。</li></ul><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><p>假设有一个对话框(Dialog)，其中包含了多个控件，如文本框(TextBox)、按钮(Button)等。这些控件之间存在复杂的依赖关系，例如当按钮被点击时，需要更新文本框的内容。这时候可以使用中介者模式来协调它们之间的交互。</p><p>首先我们定义一个中介者接口(IMediator)：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMediator</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口定义了一个通知方法 <code>Notify</code>，用于接收各个控件发来的消息。</p><p>接下来定义一个抽象控件类(Control)，并实现中介者接口,用于处理控件之间的消息通知：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMediator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Dialog</span> _dialog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Control</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span> dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _dialog <span class="token operator">=</span> dialog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Control] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sender<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> triggered </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ev</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在控件类中实现中介者接口，定义了一个 <code>Notify</code> 方法，用于输出控件触发的事件。</p><p>接下来定义具体的控件类，如文本框(TextBox)、按钮(Button)：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Control</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span> dialog<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        _dialog<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;TextUpdated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">==</span> <span class="token string">&quot;ButtonClick&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[TextBox] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> received </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ev</span><span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sender<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">UpdateText</span><span class="token punctuation">(</span><span class="token string">&quot;Text updated by button click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Control</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span> dialog<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Button] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> clicked&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _dialog<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;ButtonClick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在具体的控件类中实现了它们的特有方法，如文本框的 <code>UpdateText</code> 和按钮的 <code>Click</code>，用于模拟控件之间的交互。</p><p>最后定义一个对话框(Dialog)，用于扮演中介者的角色：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMediator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TextBox</span> _textBox<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> _button<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _textBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimulateUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _button<span class="token punctuation">.</span><span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">==</span> <span class="token string">&quot;TextUpdated&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Dialog] Text updated: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_textBox<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对话框中，我们创建了一个文本框和一个按钮，并在 <code>SimulateUserInteraction</code> 方法中模拟按钮被点击的操作。</p><p>最后，在 <code>Main</code> 函数中运行我们的示例程序：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dialog<span class="token punctuation">.</span><span class="token function">SimulateUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Button<span class="token punctuation">]</span> Button clicked
<span class="token punctuation">[</span>Control<span class="token punctuation">]</span> TextBox triggered ButtonClick
<span class="token punctuation">[</span>TextBox<span class="token punctuation">]</span> TextBox received ButtonClick from Button
<span class="token punctuation">[</span>Control<span class="token punctuation">]</span> Dialog triggered TextUpdated
<span class="token punctuation">[</span>Dialog<span class="token punctuation">]</span> Text updated: Text updated by button click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这只是一个简单的示例，实际应用中可能会更加复杂，需要根据具体的业务场景进行设计。</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p>代码中还存在优化空间，例如可以将通知方法中的控件类型转换代码进行抽象，从而让代码更加灵活。修改后的代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Control</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">IMediator</span> _dialog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Control</span><span class="token punctuation">(</span><span class="token class-name">IMediator</span> dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _dialog <span class="token operator">=</span> dialog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Control</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token class-name">IMediator</span> dialog<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token string">&quot;TextUpdated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[TextBox] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> received </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ev</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">==</span> <span class="token string">&quot;ButtonClick&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">UpdateText</span><span class="token punctuation">(</span><span class="token string">&quot;Text updated by button click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Control</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token class-name">IMediator</span> dialog<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Button] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> clicked&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token string">&quot;ButtonClick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Button] </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> received </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ev</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMediator</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMediator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TextBox</span> _textBox<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> _button<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _textBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimulateUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _button<span class="token punctuation">.</span><span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">==</span> <span class="token string">&quot;TextUpdated&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[Dialog] Text updated: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_textBox<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Control</code> 抽象类中，我们将 <code>IMediator</code> 类型的 <code>_dialog</code> 字段声明为 <code>protected</code>，同时将 <code>Notify</code> 方法中的 <code>sender</code> 参数删除，因为这里我们已经不需要知道触发通知的控件类型了。在具体的控件类中，我们将 <code>Notify</code> 方法中的 <code>sender</code> 参数删除，改为输出控件自身的信息。这样，我们就可以将 <code>Notify</code> 方法的具体实现从控件类型中抽象出来，从而使得代码更加灵活。</p><p>在 <code>Button</code> 控件中，我们删除了 <code>Notify</code> 方法的具体实现，因为按钮并不需要做出响应，只需要通知中介者即可。</p><p>最后，在 <code>Main</code> 函数中运行我们的示例程序：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dialog<span class="token punctuation">.</span><span class="token function">SimulateUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果与之前相同：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Button<span class="token punctuation">]</span> Button clicked
<span class="token punctuation">[</span>TextBox<span class="token punctuation">]</span> TextBox received ButtonClick
<span class="token punctuation">[</span>Dialog<span class="token punctuation">]</span> Text updated: Text updated by button click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上示例，我们可以看出，中介者模式可以在多个对象之间解耦，并将它们之间的交互进行集中管理，从而提高了代码的可维护性和可扩展性。当应用场景中存在多个相互耦合的对象时，可以考虑使用中介者模式来减少对象之间的耦合，使得系统更加灵活和易于扩展。</p>`,40),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","mediator-pattern.html.vue"]]);export{d as default};
