import{_ as u,X as l,Y as i,Z as k,a0 as r,a2 as a,$ as n,a3 as o,F as m,a1 as s}from"./framework-8e4c1295.js";const d={},v=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"✨✨✨✨✨"),n("p",null,"发布/订阅模式（Publish-Subscribe Model）是一种常见的消息队列模式，用于将消息从一个生产者发送到多个消费者。在该模式中，消息生产者将消息发布到一个或多个主题（Topic），而消息消费者则可以订阅一个或多个主题来接收感兴趣的消息。")],-1),b=o('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>发布/订阅模式（Publish-Subscribe）是一种常见的消息队列模式，用于将消息从一个生产者发送到多个消费者。在该模式中，消息生产者将消息发布到一个或多个主题（Topic），而消息消费者则可以订阅一个或多个主题来接收感兴趣的消息。</p><p>在 RabbitMQ 中，发布/订阅模式通常使用交换机（Exchange）来实现。生产者将消息发送到交换机中，而每个消费者则创建自己的队列，并通过绑定（Binding）将队列与交换机关联起来。当有消息发送到交换机时，交换机会根据绑定规则将消息分发给相应的队列，从而实现消息的广播和多路复用。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ul><li>多个消费者需要处理相同的消息。例如，一个消息需要同时被推送到多个订阅者进行处理，比如新闻订阅服务。</li><li>消息生产者需要将消息广播给多个消费者。例如，系统需要将某个事件通知给所有在线用户。</li><li>系统需要支持动态监听和添加/移除订阅者。例如，用户可以随时订阅/取消订阅某些主题，而无需停止整个系统。</li><li>系统需要支持消息过滤和选择性接收。例如，不同的订阅者可能只对特定主题或特定类型的消息感兴趣。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>实现了消息的广播和多路复用，能够同时处理多个订阅者的请求。</li><li>支持动态监听和添加/移除订阅者，使得系统具备良好的扩展性和灵活性。</li><li>支持消息过滤和选择性接收，能够根据不同的订阅者的需求进行定制化推送。</li><li>提高了系统的可靠性和鲁棒性，即使某个消费者出现问题或下线，也不会影响其他消费者的正常运行。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>可能存在消息重复或丢失的问题，需要进行幂等性处理或消息确认机制。</li><li>系统架构较为复杂，需要考虑交换机、队列和绑定等各种配置参数和规则。</li><li>系统的实时性和可靠性取决于网络延迟、消息传输速度和消费者的处理能力等因素。</li></ul><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2>',11),g=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Producer"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),s(),n("span",{class:"token function"},"Main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" args"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建连接工厂对象，指定主机名和登录凭据信息"),s(`
        `),n("span",{class:"token class-name"},"ConnectionFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            HostName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"192.168.3.100"'),n("span",{class:"token punctuation"},","),s(`
            Port `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5672"),n("span",{class:"token punctuation"},","),s(`
            UserName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),n("span",{class:"token punctuation"},","),s(`
            Password `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 创建连接对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" connection "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 创建信道对象"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateModel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"logs"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 定义交换机名称"),s(`
        `),n("span",{class:"token comment"},"// 声明一个 fanout 类型的交换机，用于广播消息"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ExchangeDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"type"),n("span",{class:"token punctuation"},":"),s(" ExchangeType"),n("span",{class:"token punctuation"},"."),s("Fanout"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" messages "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token string"},'"Hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"World"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Welcome"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"to"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"RabbitMQ"'),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 向队列中发送多个消息，并设置消息持久化"),s(`
        `),n("span",{class:"token keyword"},"foreach"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" message "),n("span",{class:"token keyword"},"in"),s(" messages"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" body "),n("span",{class:"token operator"},"="),s(" Encoding"),n("span",{class:"token punctuation"},"."),s("UTF8"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetBytes"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将消息内容转换成字节数组"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" properties "),n("span",{class:"token operator"},"="),s(" channel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateBasicProperties"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            properties`),n("span",{class:"token punctuation"},"."),s("Persistent "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 设置消息持久化"),s(`

            `),n("span",{class:"token comment"},"// 发布消息到交换机中"),s(`
            channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicPublish"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"routingKey"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"basicProperties"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"body"),n("span",{class:"token punctuation"},":"),s(" body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

            Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" [生产者] 发送： {0}"'),n("span",{class:"token punctuation"},","),s(" message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" 按 [enter] 键退出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ReadLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),s(),n("span",{class:"token function"},"Main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" args"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建连接工厂对象，指定主机名和登录凭据信息"),s(`
        `),n("span",{class:"token class-name"},"ConnectionFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            HostName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"192.168.3.100"'),n("span",{class:"token punctuation"},","),s(`
            Port `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5672"),n("span",{class:"token punctuation"},","),s(`
            UserName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),n("span",{class:"token punctuation"},","),s(`
            Password `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" connection "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateModel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"logs"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 定义交换机名称"),s(`

        `),n("span",{class:"token comment"},"// 声明一个 fanout 类型的交换机，用于广播消息"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ExchangeDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"type"),n("span",{class:"token punctuation"},":"),s(" ExchangeType"),n("span",{class:"token punctuation"},"."),s("Fanout"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 创建一个临时队列，并绑定到指定的交换机上"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" queueName "),n("span",{class:"token operator"},"="),s(" channel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("QueueName"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueBind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(" queueName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"routingKey"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"[消费者1] 等待队列."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 构造一个消费者对象，并设置 Received 事件回调函数"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" consumer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"EventingBasicConsumer"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        consumer`),n("span",{class:"token punctuation"},"."),s("Received "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token punctuation"},"("),s("model"),n("span",{class:"token punctuation"},","),s(" ea"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" message "),n("span",{class:"token operator"},"="),s(" Encoding"),n("span",{class:"token punctuation"},"."),s("UTF8"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetString"),n("span",{class:"token punctuation"},"("),s("ea"),n("span",{class:"token punctuation"},"."),s("Body"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token interpolation-string"},[n("span",{class:"token string"},`$"[消费者1] Received '`),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token expression language-csharp"},"message"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},`'"`)]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//成功时手动确认消息"),s(`
            channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicAck"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"deliveryTag"),n("span",{class:"token punctuation"},":"),s(" ea"),n("span",{class:"token punctuation"},"."),s("DeliveryTag"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"multiple"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//失败时打回队列"),s(`
            `),n("span",{class:"token comment"},"//channel.BasicNack(deliveryTag: ea.DeliveryTag, multiple: false, requeue: true);"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 启动消费者，并指定要消费的队列"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicConsume"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(" queueName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"autoAck"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"consumer"),n("span",{class:"token punctuation"},":"),s(" consumer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"按 [enter] 键退出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ReadLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),s(),n("span",{class:"token function"},"Main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),s(" args"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建连接工厂对象，指定主机名和登录凭据信息"),s(`
        `),n("span",{class:"token class-name"},"ConnectionFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            HostName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"192.168.3.100"'),n("span",{class:"token punctuation"},","),s(`
            Port `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5672"),n("span",{class:"token punctuation"},","),s(`
            UserName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),n("span",{class:"token punctuation"},","),s(`
            Password `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"guest"'),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" connection "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CreateModel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"logs"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 定义交换机名称"),s(`

        `),n("span",{class:"token comment"},"// 声明一个 fanout 类型的交换机，用于广播消息"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ExchangeDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"type"),n("span",{class:"token punctuation"},":"),s(" ExchangeType"),n("span",{class:"token punctuation"},"."),s("Fanout"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 创建一个临时队列，并绑定到指定的交换机上"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" queueName "),n("span",{class:"token operator"},"="),s(" channel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("QueueName"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"QueueBind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(" queueName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"exchange"),n("span",{class:"token punctuation"},":"),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"routingKey"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"[消费者2] 等待队列."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 构造一个消费者对象，并设置 Received 事件回调函数"),s(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" consumer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"EventingBasicConsumer"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        consumer`),n("span",{class:"token punctuation"},"."),s("Received "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token punctuation"},"("),s("model"),n("span",{class:"token punctuation"},","),s(" ea"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" message "),n("span",{class:"token operator"},"="),s(" Encoding"),n("span",{class:"token punctuation"},"."),s("UTF8"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetString"),n("span",{class:"token punctuation"},"("),s("ea"),n("span",{class:"token punctuation"},"."),s("Body"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token interpolation-string"},[n("span",{class:"token string"},`$"[消费者2] Received '`),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token expression language-csharp"},"message"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},`'"`)]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//成功时手动确认消息"),s(`
            channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicAck"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"deliveryTag"),n("span",{class:"token punctuation"},":"),s(" ea"),n("span",{class:"token punctuation"},"."),s("DeliveryTag"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"multiple"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//失败时打回队列"),s(`
            `),n("span",{class:"token comment"},"//channel.BasicNack(deliveryTag: ea.DeliveryTag, multiple: false, requeue: true);"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 启动消费者，并指定要消费的队列"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"BasicConsume"),n("span",{class:"token punctuation"},"("),n("span",{class:"token named-parameter punctuation"},"queue"),n("span",{class:"token punctuation"},":"),s(" queueName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"autoAck"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token named-parameter punctuation"},"consumer"),n("span",{class:"token punctuation"},":"),s(" consumer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"按 [enter] 键退出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        Console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ReadLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=o(`<p>在生产者中，我们首先创建了一个 ConnectionFactory 实例，并指定了 RabbitMQ 服务的主机名。然后，使用该实例创建了一个连接对象，并创建了一个通道（Channel）对象。</p><p>接下来，我们定义了交换机的名称，并通过 ExchangeDeclare 方法声明了一个类型为 fanout 的交换机，并将消息通过指定的交换机发出。</p><p>在消费者中，我们使用 QueueDeclare 方法创建了一个临时队列，并使用 QueueBind 方法将该队列绑定到指定的交换机上。这里需要注意，如果没有指定 routingKey，则会将队列与交换机上的所有绑定进行匹配。</p><p>接下来，我们构造了一个 EventingBasicConsumer 对象，并定义了 Received 事件回调函数。当消费者从队列中收到消息时，就会触发该事件回调函数，并将消息的内容输出到控制台上。</p><p>最后，我们通过 BasicConsume 方法启动消费者，并指定要消费的队列。其中，queue 参数表示要从哪个队列获取消息，autoAck 参数表示是否自动确认消息已经被消费，这里我们使用默认值 true，表示自动确认消息，consumer 参数表示要使用的消费者对象。</p><h2 id="定制化推送" tabindex="-1"><a class="header-anchor" href="#定制化推送" aria-hidden="true">#</a> 定制化推送</h2><p>在 RabbitMQ 的发布订阅模式中，可以通过绑定不同的队列和交换机来实现针对不同订阅者需求的消息推送。</p><p>具体来说，我们可以为每个订阅者创建一个独立的队列，并将该队列绑定到指定的交换机上。当发布者向这个交换机发送一条消息时，该消息会被广播到所有的队列中，从而满足订阅者的定制化推送需求。</p><p>例如，假设我们有三个订阅者，分别希望接收不同类型的消息：</p><ul><li>订阅者 A：只希望接收网站用户注册相关的消息；</li><li>订阅者 B：只希望接收网站订单支付相关的消息；</li><li>订阅者 C：希望接收所有类型的消息。</li></ul><p>那么我们可以分别为这三个订阅者创建不同的队列，并将它们分别绑定到专门处理网站用户注册、网站订单支付以及所有类型消息的交换机上。</p><p>接着，当发布者要向订阅者 A 推送一条网站用户注册相关的消息时，它只需要将这条消息发送到处理网站用户注册的交换机即可；当发布者要向订阅者 B 推送一条网站订单支付相关的消息时，它只需要将这条消息发送到处理网站订单支付的交换机即可。</p><p>而对于订阅者 C，由于它希望接收所有类型的消息，因此我们可以为它创建一个新的队列，并将该队列绑定到所有类型消息的交换机上。</p><p>以下是一个示例代码，展示了如何使用 .NET 6 创建一个带有多个订阅者的 RabbitMQ 发布订阅模式：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 创建连接工厂对象，指定主机名和登录凭据信息</span>
<span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HostName <span class="token operator">=</span> <span class="token string">&quot;192.168.3.100&quot;</span><span class="token punctuation">,</span>
    Port <span class="token operator">=</span> <span class="token number">5672</span><span class="token punctuation">,</span>
    UserName <span class="token operator">=</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">,</span>
    Password <span class="token operator">=</span> <span class="token string">&quot;guest&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建并配置处理网站用户注册的交换机和队列</span>
<span class="token class-name"><span class="token keyword">var</span></span> exchangeA <span class="token operator">=</span> <span class="token string">&quot;exchange_A&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeA<span class="token punctuation">,</span> <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> queueA <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QueueName<span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueA<span class="token punctuation">,</span> <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeA<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;user_signup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建并配置处理网站订单支付的交换机和队列</span>
<span class="token class-name"><span class="token keyword">var</span></span> exchangeB <span class="token operator">=</span> <span class="token string">&quot;exchange_B&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeB<span class="token punctuation">,</span> <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> queueB <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QueueName<span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueB<span class="token punctuation">,</span> <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeB<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;order_pay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建并配置处理所有类型消息的交换机和队列</span>
<span class="token class-name"><span class="token keyword">var</span></span> exchangeC <span class="token operator">=</span> <span class="token string">&quot;exchange_C&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeC<span class="token punctuation">,</span> <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> queueC <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QueueName<span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueC<span class="token punctuation">,</span> <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeC<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动消费者 A，接收处理网站用户注册相关的消息</span>
<span class="token class-name"><span class="token keyword">var</span></span> consumerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
consumerA<span class="token punctuation">.</span>Received <span class="token operator">+=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;接收到用户注册的消息: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueA<span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">consumer</span><span class="token punctuation">:</span> consumerA<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动消费者 B，接收处理网站订单支付相关的消息</span>
<span class="token class-name"><span class="token keyword">var</span></span> consumerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
consumerB<span class="token punctuation">.</span>Received <span class="token operator">+=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;接收到订单支付的消息: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueB<span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">consumer</span><span class="token punctuation">:</span> consumerB<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动消费者 C，接收所有类型的消息</span>
<span class="token class-name"><span class="token keyword">var</span></span> consumerC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
consumerC<span class="token punctuation">.</span>Received <span class="token operator">+=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;接收到所有类型的消息: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueC<span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">consumer</span><span class="token punctuation">:</span> consumerC<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布消息到交换机 A，通知所有订阅者用户已注册成功</span>
<span class="token class-name"><span class="token keyword">var</span></span> messageA <span class="token operator">=</span> <span class="token string">&quot;注册成功!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> bodyA <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>messageA<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeA<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;user_signup&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> bodyA<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布消息到交换机 B，通知所有订阅者订单已支付成功</span>
<span class="token class-name"><span class="token keyword">var</span></span> messageB <span class="token operator">=</span> <span class="token string">&quot;订单已支付!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> bodyB <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>messageB<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeB<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;order_pay&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> bodyB<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布消息到交换机 C，通知所有订阅者有新的活动推出</span>
<span class="token class-name"><span class="token keyword">var</span></span> messageC <span class="token operator">=</span> <span class="token string">&quot;新活动推出!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> bodyC <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>messageC<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeC<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> bodyC<span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;按 [enter] 键退出.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function w(x,C){const p=m("Tabs");return l(),i("div",null,[v,k(" more "),b,r(p,{id:"91",data:[{title:"生产者"},{title:"消费者1"},{title:"消费者2"}]},{tab0:a(({title:t,value:e,isActive:c})=>[g]),tab1:a(({title:t,value:e,isActive:c})=>[h]),tab2:a(({title:t,value:e,isActive:c})=>[y]),_:1}),f])}const B=u(d,[["render",w],["__file","publish-subscribe-mode.html.vue"]]);export{B as default};
