import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-DbRsw7jK.js";const e={},p=t(`<div class="hint-container tip"><p class="hint-container-title">✨✨✨✨✨</p><p>原型模式是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需向客户端公开对象创建的细节。该模式可以有效地减少对象创建的成本，因为它允许在运行时动态地添加或删除产品。</p></div><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>原型模式是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需向客户端公开对象创建的细节。该模式可以有效地减少对象创建的成本，因为它允许在运行时动态地添加或删除产品。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>原型模式适用于以下情况：</p><ul><li>当需要创建对象的过程很昂贵或复杂时，可以使用现有对象的克隆来避免这种成本。</li><li>当创建对象的过程要求应用程序具有独立于其类型的能力时，可以使用原型模式。也就是说，对象可以按原样复制，而不会知道它们的类。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p><strong>使用原型模式的优点包括：</strong></p><ul><li>可以避免重复性的代码，节约了创建对象的成本和时间。</li><li>可以更灵活地创建对象，而不需要创建新的子类或更改现有类的实现。</li><li>可以动态添加或删除产品，更容易实现一个复杂的产品系列。</li></ul><p><strong>使用原型模式也有一些缺点：</strong></p><ul><li>必须正确地实现克隆方法。如果没有正确地实现，它可能会导致不良后果，例如对象状态的不正确复制。</li><li>如果对象具有循环引用或对象图太复杂，则可能需要较长时间才能完成克隆。</li><li>如果对象状态需要特殊处理，则可能需要额外的实现来正确地克隆该状态。</li></ul><p>下面是一个使用C#实现原型模式的示例代码，我们将创建一个原型电子产品类，该类可以被克隆成不同类型的电子产品。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 定义原型类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ElectronicProductPrototype</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Model <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">ElectronicProductPrototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体原型类1：手机</span>
<span class="token keyword">class</span> <span class="token class-name">PhonePrototype</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ElectronicProductPrototype</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">PhonePrototype</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> model<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Model <span class="token operator">=</span> model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ElectronicProductPrototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloning phone model </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>ElectronicProductPrototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体原型类2：平板电脑</span>
<span class="token keyword">class</span> <span class="token class-name">TabletPrototype</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ElectronicProductPrototype</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">TabletPrototype</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> model<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Model <span class="token operator">=</span> model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ElectronicProductPrototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloning tablet model </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>ElectronicProductPrototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端</span>
<span class="token keyword">class</span> <span class="token class-name">Client</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建手机原型</span>
        <span class="token class-name"><span class="token keyword">var</span></span> phonePrototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhonePrototype</span><span class="token punctuation">(</span><span class="token string">&quot;iPhone X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 克隆手机原型</span>
        <span class="token class-name"><span class="token keyword">var</span></span> clonedPhone1 <span class="token operator">=</span> phonePrototype<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloned phone model: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clonedPhone1<span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> clonedPhone2 <span class="token operator">=</span> phonePrototype<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloned phone model: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clonedPhone2<span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建平板电脑原型</span>
        <span class="token class-name"><span class="token keyword">var</span></span> tabletPrototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TabletPrototype</span><span class="token punctuation">(</span><span class="token string">&quot;iPad Pro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 克隆平板电脑原型</span>
        <span class="token class-name"><span class="token keyword">var</span></span> clonedTablet1 <span class="token operator">=</span> tabletPrototype<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloned tablet model: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clonedTablet1<span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> clonedTablet2 <span class="token operator">=</span> tabletPrototype<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cloned tablet model: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clonedTablet2<span class="token punctuation">.</span>Model</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先定义了一个 <code>ElectronicProductPrototype</code> 抽象类，它包含一个 <code>Model</code> 属性和一个 <code>Clone()</code> 方法。<code>Clone()</code> 方法返回一个克隆出来的对象，因为在原型模式中我们可以使用现有的对象作为原型，根据需要创建新的对象。</p><p>接着，我们定义了两个具体的原型类 <code>PhonePrototype</code> 和 <code>TabletPrototype</code>，它们继承自 <code>ElectronicProductPrototype</code>，并实现了 <code>Clone()</code> 方法。在 <code>Clone()</code> 方法中，我们使用了 <code>MemberwiseClone()</code> 方法来复制对象。这个方法会复制对象中的所有值类型成员，并对于引用类型成员只复制引用而不复制对象本身。</p><p>最后，我们在客户端代码中创建了原型对象，并通过调用 <code>Clone()</code> 方法来克隆它们。我们可以通过克隆后的对象的 <code>Model</code> 属性来检查它们是否被成功克隆。</p>`,16),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","prototype-pattern.html.vue"]]),k=JSON.parse('{"path":"/articles/design-pattern/prototype-pattern.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","date":"2022-05-08T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","创建型模式"],"timeline":true,"order":5,"description":"✨✨✨✨✨ 原型模式是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需向客户端公开对象创建的细节。该模式可以有效地减少对象创建的成本，因为它允许在运行时动态地添加或删除产品。","head":[["meta",{"property":"og:url","content":"http://blog.goodsxx.cn/articles/design-pattern/prototype-pattern.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 原型模式是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需向客户端公开对象创建的细节。该模式可以有效地减少对象创建的成本，因为它允许在运行时动态地添加或删除产品。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-23T07:11:44.000Z"}],["meta",{"property":"article:author","content":"SongXinXin"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2022-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-23T07:11:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-23T07:11:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SongXinXin\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}],"git":{"createdTime":1676884013000,"updatedTime":1677136304000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":2}]},"readingTime":{"minutes":3.2,"words":961},"filePathRelative":"articles/design-pattern/prototype-pattern.md","localizedDate":"2022年5月8日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">✨✨✨✨✨</p>\\n<p>原型模式是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需向客户端公开对象创建的细节。该模式可以有效地减少对象创建的成本，因为它允许在运行时动态地添加或删除产品。</p>\\n</div>\\n","autoDesc":true}');export{d as comp,k as data};
