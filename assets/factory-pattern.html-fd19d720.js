const t=JSON.parse('{"key":"v-74105bde","path":"/columns/blog-posts/series/design-pattern/factory-pattern.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","date":"2022-04-30T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","创建型模式"],"timeline":true,"order":2,"description":"✨✨✨✨✨ 工厂模式是一种创建型设计模式，它提供了一种将对象的创建与使用分离的方式。通过工厂模式，我们可以定义一个接口或抽象类作为工厂，然后由具体的子类来负责实例化对象。这样，客户端就不需要关心具体的对象创建过程，而只需要通过工厂接口来获取需要的对象。","head":[["meta",{"property":"og:url","content":"http://goodsxx.cn/columns/blog-posts/series/design-pattern/factory-pattern.html"}],["meta",{"property":"og:site_name","content":"Growing Notes"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"✨✨✨✨✨ 工厂模式是一种创建型设计模式，它提供了一种将对象的创建与使用分离的方式。通过工厂模式，我们可以定义一个接口或抽象类作为工厂，然后由具体的子类来负责实例化对象。这样，客户端就不需要关心具体的对象创建过程，而只需要通过工厂接口来获取需要的对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-20T09:06:53.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2022-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-20T09:06:53.000Z"}]]},"headers":[],"git":{"createdTime":1671520332000,"updatedTime":1676884013000,"contributors":[{"name":"SongXinXin","email":"1368084801@qq.com","commits":2}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"columns/blog-posts/series/design-pattern/factory-pattern.md","localizedDate":"2022年4月30日","excerpt":"<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">✨✨✨✨✨</p>\\n<p>工厂模式是一种创建型设计模式，它提供了一种将对象的创建与使用分离的方式。通过工厂模式，我们可以定义一个接口或抽象类作为工厂，然后由具体的子类来负责实例化对象。这样，客户端就不需要关心具体的对象创建过程，而只需要通过工厂接口来获取需要的对象。</p>\\n</div>\\n","autoDesc":true}');export{t as data};
